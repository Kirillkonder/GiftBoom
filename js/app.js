class TonCasinoApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.demoMode = false;
        this.isAdmin = false;
        this.init();
    }

    async init() {
        this.tg.expand();
        this.tg.ready();
        
        await this.loadUserData();
        this.checkAdminStatus();
        this.setupEventListeners();
        this.loadTransactionHistory();
        this.updateModeUI();
    }

 async checkAdminStatus() {
    try {
        const response = await fetch('/api/admin/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                telegramId: this.tg.initDataUnsafe.user.id,
                password: '1234'
            })
        });

        const result = await response.json();
        this.isAdmin = result.isAdmin;
        
        if (this.isAdmin) {
            this.showAdminButton();
        }
    } catch (error) {
        console.error('Admin check error:', error);
    }
}

    showAdminButton() {
        const adminBtn = document.getElementById('admin-button');
        if (adminBtn) {
            adminBtn.style.display = 'block';
        }
    }

 async loadUserData() {
    try {
        const response = await fetch(`/api/user/balance/${this.tg.initDataUnsafe.user.id}`);
        this.userData = await response.json();
        this.demoMode = this.userData.demo_mode;
        this.isAdminUser = this.tg.initDataUnsafe.user.id === 842428912 || this.tg.initDataUnsafe.user.id === 1135073023;
        this.updateUI();
    } catch (error) {
        console.error('Error loading user data:', error);
    }
}

    async loadTransactionHistory() {
        try {
            const response = await fetch(`/api/transactions/${this.tg.initDataUnsafe.user.id}`);
            const data = await response.json();
            this.updateTransactionHistory(data);
        } catch (error) {
            console.error('Error loading transactions:', error);
        }
    }

    updateTransactionHistory(transactions) {
        const transactionsContainer = document.getElementById('transactions');
        if (transactionsContainer) {
            transactionsContainer.innerHTML = '';
            
            transactions.forEach(transaction => {
                if (transaction.status === 'completed') {
                    const transactionElement = document.createElement('div');
                    transactionElement.className = 'transaction-item';
                    
                    const amountClass = transaction.amount > 0 ? 'transaction-positive' : 'transaction-negative';
                    const sign = transaction.amount > 0 ? '+' : '';
                    const modeBadge = transaction.demo_mode ? ' (TEST)' : ' (REAL)';
                    
                    transactionElement.innerHTML = `
                        <div class="transaction-info">
                            <div>${transaction.type.toUpperCase()}${modeBadge}</div>
                            <div class="transaction-date">${new Date(transaction.created_at).toLocaleDateString()}</div>
                        </div>
                        <div class="transaction-amount ${amountClass}">
                            ${sign}${transaction.amount} TON
                        </div>
                    `;
                    
                    transactionsContainer.appendChild(transactionElement);
                }
            });

            if (transactionsContainer.children.length === 0) {
                transactionsContainer.innerHTML = '<div class="no-transactions">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
            }
        }
    }

 updateUI() {
    if (this.userData) {
        const balanceElement = document.getElementById('balance');
        const modeSwitcher = document.querySelector('.mode-switcher');
        const modeBadgeElement = document.getElementById('mode-badge');
        const modeInfoElement = document.getElementById('mode-info');
        const modeButton = document.getElementById('mode-button');
        const depositModeInfo = document.getElementById('deposit-mode-info');
        const withdrawModeInfo = document.getElementById('withdraw-mode-info');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω–∞–º
        if (modeSwitcher) {
            modeSwitcher.style.display = this.isAdminUser ? 'block' : 'none';
        }
        
        if (balanceElement) {
            const balance = this.demoMode ? this.userData.demo_balance : this.userData.main_balance;
            balanceElement.textContent = balance.toFixed(2);
        }
        
        if (modeBadgeElement && this.isAdminUser) {
            modeBadgeElement.textContent = this.demoMode ? 'TESTNET' : 'MAINNET';
            modeBadgeElement.className = this.demoMode ? 'mode-badge testnet' : 'mode-badge mainnet';
        }
        
        if (modeInfoElement && this.isAdminUser) {
            modeInfoElement.textContent = this.demoMode ? 
                'üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ TON' : 
                'üåê –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç–æ—è—â–∏–µ TON';
        }
        
        if (modeButton && this.isAdminUser) {
            modeButton.textContent = this.demoMode ? 
                'üîÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º TON' : 
                'üîÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º TON';
            modeButton.className = this.demoMode ? 'btn btn-testnet' : 'btn btn-mainnet';
        }
        
        if (depositModeInfo) {
            depositModeInfo.textContent = this.demoMode ? 
                '–î–µ–º–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ TON)' : 
                '–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Crypto Pay';
        }
        
        if (withdrawModeInfo) {
            withdrawModeInfo.textContent = this.demoMode ? 
                '–î–µ–º–æ-–≤—ã–≤–æ–¥ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ TON)' : 
                '–†–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Pay';
        }
    }
}

    updateModeUI() {
        const modeSwitch = document.getElementById('mode-switch');
        if (modeSwitch) {
            modeSwitch.checked = this.demoMode;
        }
    }

    async toggleMode() {
        try {
            const response = await fetch('/api/user/toggle-demo-mode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id
                })
            });

            const result = await response.json();
            
            if (result.success) {
                this.demoMode = result.demo_mode;
                await this.loadUserData();
                
                this.tg.showPopup({
                    title: this.demoMode ? "üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" : "üåê –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                    message: this.demoMode ? 
                        "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ TON" : 
                        "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ TON",
                    buttons: [{ type: "ok" }]
                });
                
                await this.loadTransactionHistory();
            }
        } catch (error) {
            console.error('Toggle mode error:', error);
        }
    }

    async openAdminPanel() {
        document.getElementById('admin-modal').style.display = 'block';
        await this.loadAdminData();
    }

    async closeAdminPanel() {
        document.getElementById('admin-modal').style.display = 'none';
    }

  async loadAdminData() {
    try {
        const response = await fetch(`/api/admin/dashboard/${this.tg.initDataUnsafe.user.id}`);
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–Ω–∫–∞
        document.getElementById('admin-bank-balance').textContent = data.bank_balance;
        document.getElementById('admin-demo-bank-balance').textContent = data.demo_bank_balance;
        document.getElementById('admin-total-users').textContent = data.total_users;
        document.getElementById('admin-total-transactions').textContent = data.total_transactions;
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö –∞–¥–º–∏–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const bankElements = document.querySelectorAll('.bank-balance');
        const demoBankElements = document.querySelectorAll('.demo-bank-balance');
        
        bankElements.forEach(el => {
            el.textContent = data.bank_balance;
        });
        
        demoBankElements.forEach(el => {
            el.textContent = data.demo_bank_balance;
        });
        
    } catch (error) {
        console.error('Admin data error:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
}

    async withdrawProfit() {
        const amount = parseFloat(prompt('–°–∫–æ–ª—å–∫–æ TON –≤—ã–≤–µ—Å—Ç–∏?'));
        
        if (!amount || amount < 1) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        try {
            const response = await fetch('/api/admin/withdraw-profit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    amount: amount
                })
            });

            const result = await response.json();
            
            if (result.success) {
                alert(`–£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ ${amount} TON! Hash: ${result.hash}`);
                await this.loadAdminData();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: ' + result.error);
            }
        } catch (error) {
            console.error('Withdraw profit error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ');
        }
    }

    async addDemoBalance() {
        const targetTelegramId = prompt('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
        const amount = parseFloat(prompt('–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–µ TON):'));
        
        if (!targetTelegramId || !amount || amount < 1) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return;
        }

        try {
            const response = await fetch('/api/admin/add-demo-balance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    targetTelegramId: targetTelegramId,
                    amount: amount
                })
            });

            const result = await response.json();
            
            if (result.success) {
                alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${amount} —Ç–µ—Å—Ç–æ–≤—ã—Ö TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetTelegramId}`);
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('Add demo balance error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
        }
    }

    async processDeposit() {
        const amount = parseFloat(document.getElementById('deposit-amount').value);
        
        if (!amount || amount < 1) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 1 TON');
            return;
        }

        try {
            const response = await fetch('/api/create-invoice', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    amount: amount,
                    demoMode: this.demoMode
                })
            });

            const result = await response.json();
            
            if (result.success) {
                if (this.demoMode) {
                    // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    await this.loadUserData();
                    this.tg.showPopup({
                        title: "‚úÖ –î–µ–º–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        message: `–î–µ–º–æ-–¥–µ–ø–æ–∑–∏—Ç ${amount} TON —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!`,
                        buttons: [{ type: "ok" }]
                    });
                } else {
                    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                    window.open(result.invoice_url, '_blank');
                    this.tg.showPopup({
                        title: "–û–ø–ª–∞—Ç–∞ TON",
                        message: `–û—Ç–∫—Ä–æ–π—Ç–µ Crypto Bot –¥–ª—è –æ–ø–ª–∞—Ç—ã ${amount} TON`,
                        buttons: [{ type: "ok" }]
                    });
                    this.checkDepositStatus(result.invoice_id);
                }
                
                closeDepositModal();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ' + result.error);
            }
        } catch (error) {
            console.error('Deposit error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
        }
    }

    async checkDepositStatus(invoiceId) {
        const checkInterval = setInterval(async () => {
            try {
                const response = await fetch('/api/check-invoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        invoiceId: invoiceId,
                        demoMode: this.demoMode
                    })
                });
                
                const result = await response.json();
                
                if (result.status === 'paid') {
                    clearInterval(checkInterval);
                    this.tg.showPopup({
                        title: "‚úÖ –£—Å–ø–µ—à–Ω–æ",
                        message: '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!',
                        buttons: [{ type: "ok" }]
                    });
                    await this.loadUserData();
                    await this.loadTransactionHistory();
                } else if (result.status === 'expired' || result.status === 'cancelled') {
                    clearInterval(checkInterval);
                    this.tg.showPopup({
                        title: "‚ùå –û—à–∏–±–∫–∞",
                        message: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω',
                        buttons: [{ type: "ok" }]
                    });
                }
            } catch (error) {
                console.error('Status check error:', error);
            }
        }, 5000);
    }

    async processWithdraw() {
        const amount = parseFloat(document.getElementById('withdraw-amount').value);
        const address = document.getElementById('withdraw-address').value;

        if (!amount || amount < 1 || !address) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            return;
        }

        try {
            const response = await fetch('/api/create-withdrawal', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    amount: amount,
                    address: address,
                    demoMode: this.demoMode
                })
            });

            const result = await response.json();
            
            if (result.success) {
                await this.loadUserData();
                
                this.tg.showPopup({
                    title: this.demoMode ? "‚úÖ –î–µ–º–æ-–≤—ã–≤–æ–¥" : "‚è≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                    message: this.demoMode ? 
                        `–î–µ–º–æ-–≤—ã–≤–æ–¥ ${amount} TON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!` :
                        `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
                    buttons: [{ type: "ok" }]
                });
                
                closeWithdrawModal();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: ' + result.error);
            }
        } catch (error) {
            console.error('Withdraw error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    }

    setupEventListeners() {
        window.onclick = function(event) {
            const depositModal = document.getElementById('deposit-modal');
            const withdrawModal = document.getElementById('withdraw-modal');
            const adminModal = document.getElementById('admin-modal');
            
            if (event.target === depositModal) closeDepositModal();
            if (event.target === withdrawModal) closeWithdrawModal();
            if (event.target === adminModal) this.closeAdminPanel();
        }.bind(this);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let app;

function openDepositModal() {
    document.getElementById('deposit-modal').style.display = 'block';
}

function closeDepositModal() {
    document.getElementById('deposit-modal').style.display = 'none';
    document.getElementById('deposit-amount').value = '';
}

function openWithdrawModal() {
    document.getElementById('withdraw-modal').style.display = 'block';
}

function closeWithdrawModal() {
    document.getElementById('withdraw-modal').style.display = 'none';
    document.getElementById('withdraw-amount').value = '';
    document.getElementById('withdraw-address').value = '';
}

function openAdminPanel() {
    app.openAdminPanel();
}

function closeAdminPanel() {
    app.closeAdminPanel();
}

function toggleMode() {
    app.toggleMode();
}

function processDeposit() {
    app.processDeposit();
}

function processWithdraw() {
    app.processWithdraw();
}

function withdrawProfit() {
    app.withdrawProfit();
}

function addDemoBalance() { 
    app.addDemoBalance();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    app = new TonCasinoApp();
});
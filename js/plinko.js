// üî• –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–ò–ó–ò–ö–ê PLINKO: 
// 100% –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º (0.4x –∏ 0.8x)

class PlinkoGame {
    constructor() {
        // Game state
        this.currentUser = null;
        this.isDemoMode = false;
        this.currentBet = 0.1;
        this.balance = 0;
        this.difficultyMode = 'easy'; // –ª–µ–≥–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, —Å–ª–æ–∂–Ω—ã–π
        
        // Canvas setup
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.resizeCanvas();

        // Game elements
        this.activeBalls = [];
        this.pegs = [];
        this.slots = [];

        // Physics
        this.gravity = 0.6;
        this.bounce = 0.7;
        this.friction = 0.99;

        // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ü—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º + 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —à–∞—Ä–∞
        this.ballsDropped = 0;
        this.nextRandomBallsAt = Math.floor(Math.random() * 26) + 25; // 25-50 —à–∞—Ä–æ–≤
        this.randomBallsRemaining = 0;
        this.randomBallsActive = 0;

        // Initialize
        this.setupEventListeners();
        this.createPegs();
        this.createSlots();
        this.initializeUser();
        this.setupGiftBoom();
        this.gameLoop();
    }

    async initializeUser() {
        const tg = window.Telegram.WebApp;
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            this.currentUser = {
                id: tg.initDataUnsafe.user.id,
                username: tg.initDataUnsafe.user.username || `User_${tg.initDataUnsafe.user.id}`
            };
            await this.loadUserData();
        }
        this.updateUI();
    }

    async loadUserData() {
        try {
            const response = await fetch(`/api/user/balance/${this.currentUser.id}`);
            if (response.ok) {
                const userData = await response.json();
                this.balance = userData.demo_mode ? userData.demo_balance : userData.main_balance;
                this.isDemoMode = userData.demo_mode;
                document.getElementById('demo-badge').style.display = this.isDemoMode ? 'block' : 'none';
                this.updateUI();
            }
        } catch (error) {
            console.error('Error loading user data:', error);
        }
    }

    resizeCanvas() {
        const board = document.querySelector('.game-board');
        this.canvas.width = board.clientWidth;
        this.canvas.height = board.clientHeight;
        this.pegRadius = Math.min(this.canvas.width, this.canvas.height) * 0.012;
        this.ballRadius = this.pegRadius * 1.2;
    }

    setupEventListeners() {
        window.addEventListener('resize', () => {
            this.resizeCanvas();
            this.pegs = [];
            this.createPegs();
        });

        document.getElementById('dropBall').addEventListener('click', () => this.dropBall());

        // Drop ball on canvas click
        this.canvas.addEventListener('click', (e) => {
            if (this.currentBet > 0 && this.balance >= this.currentBet) {
                const rect = this.canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                this.dropBallAt(x);
            } else {
                this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            }
        });
    }

    setupGiftBoom() {
        const giftBoomBall = document.getElementById('giftboomBall');
        if (giftBoomBall) {
            giftBoomBall.addEventListener('click', () => {
                this.dropBallFromGiftBoom();
            });
        }
    }

    dropBallFromGiftBoom() {
        if (this.currentBet > 0 && this.balance >= this.currentBet) {
            const centerX = this.canvas.width / 2;
            this.dropBallAt(centerX);
        } else {
            this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    }

    createPegs() {
        const rows = 10;
        const verticalSpacing = this.canvas.height / (rows + 2);

        // –ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–∞–≥ –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –≤–∏–¥
        const baseHorizontalSpacing = this.canvas.width / (rows + 1);
        const sideMargin = this.pegRadius + 2; // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç—Å—Ç—É–ø, —á—Ç–æ–±—ã –∫—Ä–∞–π–Ω–∏–µ –∫–æ–ª—ã—à–∫–∏ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–Ω—ã

        for (let row = 0; row < rows; row++) {
            const pegsInRow = row + 3;

            // –®–∏—Ä–∏–Ω–∞ —Ä—è–¥–∞ –ø—Ä–∏ –±–∞–∑–æ–≤–æ–º —à–∞–≥–µ
            let rowSpacing = baseHorizontalSpacing;
            let rowWidth = (pegsInRow - 1) * rowSpacing;

            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ä—è–¥–∞ —Å —É—á—ë—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
            const maxRowWidth = this.canvas.width - sideMargin * 2;

            // –ï—Å–ª–∏ —Ä—è–¥ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫—ã–π (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –Ω–∏–∂–Ω–∏—Ö —Ä—è–¥–æ–≤), —Å–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º —à–∞–≥
            if (rowWidth > maxRowWidth) {
                rowSpacing = maxRowWidth / (pegsInRow - 1);
                rowWidth = maxRowWidth;
            }

            const startX = (this.canvas.width - rowWidth) / 2; // –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É

            for (let i = 0; i < pegsInRow; i++) {
                this.pegs.push({
                    x: startX + i * rowSpacing,
                    y: verticalSpacing * (row + 2),
                    radius: this.pegRadius
                });
            }
        }
    }

   createSlots() {
    const slotCount = 7;
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å –∫—Ä–∞–µ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
    const sideMargin = 10; // –æ—Ç—Å—Ç—É–ø —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    const availableWidth = this.canvas.width - (sideMargin * 2);
    const slotWidth = availableWidth / slotCount;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const multipliersByDifficulty = {
        easy: [5.8, 2.2, 0.8, 0.4, 0.8, 2.2, 5.8],    // –õ–µ–≥–∫–∏–π (—Ç–µ–∫—É—â–∏–π)
        medium: [8.4, 4.7, 0.5, 0.2, 0.5, 4.7, 8.4],  // –°—Ä–µ–¥–Ω–∏–π
        hard: [15.6, 8.7, 0.2, 0.1, 0.2, 8.7, 15.6]   // –°–ª–æ–∂–Ω—ã–π
    };
    
    const multipliers = multipliersByDifficulty[this.difficultyMode];
    
    this.slots = [];
    for (let i = 0; i < slotCount; i++) {
        this.slots.push({
            x: sideMargin + (i * slotWidth), // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
            width: slotWidth,
            multiplier: multipliers[i],
            index: i
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –≤ HTML
    this.updateSlotsDisplay();
    
    console.log(`üéØ –°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ ${this.difficultyMode}:`, this.slots.map(s => `${s.multiplier}x`).join(' | '));
}

updateSlotsDisplay() {
    const slotsContainer = document.getElementById('slots');
    if (slotsContainer) {
        const slotElements = slotsContainer.querySelectorAll('.slot');
        this.slots.forEach((slot, index) => {
            if (slotElements[index]) {
                slotElements[index].textContent = `${slot.multiplier}x`;
                slotElements[index].setAttribute('data-value', slot.multiplier.toString());
                
                // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –¶–í–ï–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
                slotElements[index].className = 'slot';
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
                if (slot.multiplier >= 5) {
                    slotElements[index].classList.add('high-multiplier');
                } else if (slot.multiplier >= 2) {
                    slotElements[index].classList.add('medium-multiplier');
                } else if (slot.multiplier >= 0.8) {
                    slotElements[index].classList.add('low-multiplier');
                } else {
                    slotElements[index].classList.add('lowest-multiplier');
                }
            }
        });
    }
}
    async dropBall() {
        if (this.currentBet > 0 && this.balance >= this.currentBet) {
            const x = this.canvas.width / 2;
            this.dropBallAt(x);
        } else {
            this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    }

    async dropBallAt(x) {
        try {
            // üî• –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–ï–†–ï–î –°–¢–ê–í–ö–û–ô
            if (this.balance < this.currentBet) {
                this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                return;
            }

            const response = await fetch('/api/plinko/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    telegramId: this.currentUser.id,
                    betAmount: this.currentBet,
                    rows: 10,
                    demoMode: this.isDemoMode,
                    difficultyMode: this.difficultyMode
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏');
            }

            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
                this.balance = result.new_balance;
                this.updateUI();
                
                // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–£ –°–õ–£–ß–ê–ô–ù–´–• –®–ê–†–û–í
                this.ballsDropped++;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —à–∞—Ä —Å–ª—É—á–∞–π–Ω—ã–º
                let isRandomBall = false;
                if (this.ballsDropped >= this.nextRandomBallsAt && this.randomBallsRemaining > 0) {
                    isRandomBall = true;
                    this.randomBallsRemaining--;
                    this.randomBallsActive++;
                    console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å: ${this.randomBallsRemaining}`);
                }
                
                // –°–æ–∑–¥–∞–µ–º —à–∞—Ä —Å —É—á–µ—Ç–æ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                this.createBall(x, result.ball_id, isRandomBall);
                
                // –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —à–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä
                if (this.randomBallsRemaining === 0 && this.randomBallsActive === 0) {
                    this.nextRandomBallsAt = this.ballsDropped + Math.floor(Math.random() * 26) + 25; // 25-50 —à–∞—Ä–æ–≤
                    this.randomBallsRemaining = 2;
                    console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ —à–∞—Ä—ã —á–µ—Ä–µ–∑ ${this.nextRandomBallsAt - this.ballsDropped} —à–∞—Ä–æ–≤`);
                }
                
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏');
            }

        } catch (error) {
            console.error('Error dropping ball:', error);
            this.showError(error.message);
        }
    }

    createBall(startX, ballId, isRandomBall = false) {
        const ball = {
            id: ballId,
            x: startX,
            y: 0,
            radius: this.ballRadius,
            velocityX: 0,
            velocityY: 0,
            isDropping: true,
            multiplier: null,
            color: isRandomBall ? '#FFD700' : '#1e5cb8', // –ó–æ–ª–æ—Ç–æ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —à–∞—Ä–æ–≤
            isRandomBall: isRandomBall,
            hasLanded: false
        };

        this.activeBalls.push(ball);
        return ball;
    }

    updateBall(ball) {
        if (!ball.isDropping) return;

        // Apply gravity
        ball.velocityY += this.gravity;

        // Apply velocity
        ball.x += ball.velocityX;
        ball.y += ball.velocityY;

        // Apply friction
        ball.velocityX *= this.friction;
        ball.velocityY *= this.friction;

        // Check peg collisions
        this.checkPegCollisions(ball);

        // Check wall collisions
        this.checkWallCollisions(ball);

        // Check slot landing
        this.checkSlotLanding(ball);

        // Remove balls that fall off screen
        if (ball.y > this.canvas.height + 50) {
            ball.isDropping = false;
            this.activeBalls = this.activeBalls.filter(b => b !== ball);
        }
    }

    checkPegCollisions(ball) {
        for (const peg of this.pegs) {
            const dx = ball.x - peg.x;
            const dy = ball.y - peg.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < ball.radius + peg.radius) {
                // Collision response
                const angle = Math.atan2(dy, dx);
                const targetX = peg.x + Math.cos(angle) * (ball.radius + peg.radius);
                const targetY = peg.y + Math.sin(angle) * (ball.radius + peg.radius);

                ball.x = targetX;
                ball.y = targetY;

                // üî• –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–ò–ó–ò–ö–ê: 85% —à–∞–Ω—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–π —à–∞—Ä, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
                if (!ball.isRandomBall) {
                    // 85% —à–∞–Ω—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º (0.4x –∏ 0.8x)
                    if (Math.random() < 0.85) {
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Å–ª–æ—Ç–∞–º (–∏–Ω–¥–µ–∫—Å—ã 2, 3, 4)
                        const centerX = this.canvas.width / 2;
                        const direction = centerX - ball.x > 0 ? 1 : -1;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É
                        ball.velocityX += direction * 0.3;
                    } else {
                        // 15% —à–∞–Ω—Å –¥–≤–∏–∂–µ–Ω–∏—è –∫ –±–æ–ª—å—à–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
                        const direction = Math.random() > 0.5 ? 1 : -1;
                        ball.velocityX += direction * 0.5;
                    }
                } else {
                    // üî• –°–õ–£–ß–ê–ô–ù–´–ï –®–ê–†–´: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                    ball.velocityX += (Math.random() - 0.5) * 2;
                }

                // Normal bounce physics
                const normalX = dx / distance;
                const normalY = dy / distance;
                const dotProduct = ball.velocityX * normalX + ball.velocityY * normalY;

                ball.velocityX = (ball.velocityX - 2 * dotProduct * normalX) * this.bounce;
                ball.velocityY = (ball.velocityY - 2 * dotProduct * normalY) * this.bounce;

                // Add some randomness
                ball.velocityX += (Math.random() - 0.5) * 0.5;
            }
        }
    }

    checkWallCollisions(ball) {
        // Left wall
        if (ball.x - ball.radius < 0) {
            ball.x = ball.radius;
            ball.velocityX = Math.abs(ball.velocityX) * this.bounce;
        }
        // Right wall
        if (ball.x + ball.radius > this.canvas.width) {
            ball.x = this.canvas.width - ball.radius;
            ball.velocityX = -Math.abs(ball.velocityX) * this.bounce;
        }
    }

    checkSlotLanding(ball) {
        if (ball.y + ball.radius >= this.canvas.height - 20 && !ball.hasLanded) {
            for (const slot of this.slots) {
                if (ball.x >= slot.x && ball.x <= slot.x + slot.width) {
                    ball.isDropping = false;
                    ball.hasLanded = true;
                    ball.multiplier = slot.multiplier;
                    
                    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –°–õ–£–ß–ê–ô–ù–´–• –®–ê–†–û–í
                    if (ball.isRandomBall) {
                        this.randomBallsActive--;
                        console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à–∞—Ä –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è! –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${this.randomBallsActive}`);
                    }
                    
                    this.processBallResult(ball);
                    break;
                }
            }
        }
    }

    async processBallResult(ball) {
        try {
            const response = await fetch('/api/plinko/result', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ballId: ball.id,
                    multiplier: ball.multiplier,
                    demoMode: this.isDemoMode
                })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.balance = result.new_balance;
                    this.updateUI();
                    
                    // Show win notification for wins
                    if (ball.multiplier > 1) {
                        this.showWinNotification(ball.multiplier);
                    }
                }
            }
        } catch (error) {
            console.error('Error processing ball result:', error);
        }

        // Remove ball after delay
        setTimeout(() => {
            this.activeBalls = this.activeBalls.filter(b => b !== ball);
        }, 2000);
    }

    draw() {
        // Clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw pegs
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        for (const peg of this.pegs) {
            this.ctx.beginPath();
            this.ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);
            this.ctx.fill();
        }

        // Draw slots
        for (const slot of this.slots) {
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
            this.ctx.fillRect(slot.x, this.canvas.height - 20, slot.width, 20);
        }

        // Draw balls
        for (const ball of this.activeBalls) {
            this.ctx.fillStyle = ball.color;
            this.ctx.beginPath();
            this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            this.ctx.fill();

            // Add glow effect for random balls
            if (ball.isRandomBall) {
                this.ctx.shadowColor = '#FFD700';
                this.ctx.shadowBlur = 15;
                this.ctx.fill();
                this.ctx.shadowBlur = 0;
            }

            // Draw multiplier if ball has landed
            if (ball.multiplier) {
                this.ctx.fillStyle = '#fff';
                this.ctx.font = '12px Arial';
                this.ctx.textAlign = 'center';
                this.ctx.fillText(
                    `${ball.multiplier}x`, 
                    ball.x, 
                    ball.y - ball.radius - 5
                );
            }
        }
    }

    gameLoop() {
        for (const ball of this.activeBalls) {
            this.updateBall(ball);
        }
        this.draw();
        requestAnimationFrame(() => this.gameLoop());
    }

    updateUI() {
        document.getElementById('balance').textContent = this.balance.toFixed(2);
        document.getElementById('betAmount').value = this.currentBet;
    }

    showError(message) {
        this.showToast(message, 'error');
    }

    showWinNotification(multiplier) {
        this.showToast(`üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${multiplier}x!`, 'success');
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        
        const container = document.getElementById('toast-container');
        container.appendChild(toast);
        
        setTimeout(() => toast.classList.add('show'), 100);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => container.removeChild(toast), 300);
        }, 3000);
    }

    changeDifficulty(mode) {
        this.difficultyMode = mode;
        
        // Update UI
        document.querySelectorAll('.difficulty-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-difficulty="${mode}"]`).classList.add('active');
        
        // Recreate slots with new multipliers
        this.createSlots();
        
        console.log(`üéØ –†–µ–∂–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode}`);
    }
}

// Global functions for UI interactions
function goBack() {
    window.history.back();
}

function openDepositModal() {
    document.getElementById('deposit-modal').style.display = 'block';
}

function closeDepositModal() {
    document.getElementById('deposit-modal').style.display = 'none';
}

function processDeposit() {
    const amount = parseFloat(document.getElementById('deposit-amount').value);
    if (amount && amount > 0) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Crypto Pay
        alert(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} TON –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ Crypto Pay`);
        closeDepositModal();
    } else {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    }
}

function changeDifficulty(mode) {
    if (window.plinkoGame) {
        window.plinkoGame.changeDifficulty(mode);
    }
}

function decreaseBet() {
    if (window.plinkoGame) {
        window.plinkoGame.currentBet = Math.max(0.1, window.plinkoGame.currentBet - 0.1);
        window.plinkoGame.updateUI();
    }
}

function increaseBet() {
    if (window.plinkoGame) {
        window.plinkoGame.currentBet = Math.min(100, window.plinkoGame.currentBet + 0.1);
        window.plinkoGame.updateUI();
    }
}

function validateBetAmount() {
    if (window.plinkoGame) {
        const input = document.getElementById('betAmount');
        let value = parseFloat(input.value);
        if (isNaN(value) || value < 0.1) value = 0.1;
        if (value > 100) value = 100;
        window.plinkoGame.currentBet = parseFloat(value.toFixed(1));
        window.plinkoGame.updateUI();
    }
}

// Initialize game when page loads
window.addEventListener('load', () => {
    window.plinkoGame = new PlinkoGame();
});

// Close modal when clicking outside
window.addEventListener('click', (e) => {
    const modal = document.getElementById('deposit-modal');
    if (e.target === modal) {
        closeDepositModal();
    }
});
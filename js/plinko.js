// üî• –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–ò–ó–ò–ö–ê PLINKO: 
// 100% –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º

class PlinkoGame {
    constructor() {
        // Game state
        this.currentUser = null;
        this.isDemoMode = false;
        this.currentBet = 0.1;
        this.balance = 0;
        
        // Canvas setup
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.resizeCanvas();

        // Game elements
        this.activeBalls = [];
        this.pegs = [];
        this.slots = [];

        // Physics
        this.gravity = 0.6;
        this.bounce = 0.7;
        this.friction = 0.99;

        // üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –¢–æ–ª—å–∫–æ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ –º–∞–ª–µ–Ω—å–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
        this.ballsDropped = 0;
        this.nextRandomBallAt = Math.floor(Math.random() * 26) + 25; // 25-50 —à–∞—Ä–æ–≤
        this.randomBallActive = false;

        // Initialize
        this.setupEventListeners();
        this.createPegs();
        this.createSlots();
        this.initializeUser();
        this.gameLoop();
    }

    async initializeUser() {
        const tg = window.Telegram.WebApp;
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            this.currentUser = {
                id: tg.initDataUnsafe.user.id,
                username: tg.initDataUnsafe.user.username || `User_${tg.initDataUnsafe.user.id}`
            };
            await this.loadUserData();
        }
        this.updateUI();
    }

    async loadUserData() {
        try {
            const response = await fetch(`/api/user/balance/${this.currentUser.id}`);
            if (response.ok) {
                const userData = await response.json();
                this.balance = userData.demo_mode ? userData.demo_balance : userData.main_balance;
                this.isDemoMode = userData.demo_mode;
                document.getElementById('demo-badge').style.display = this.isDemoMode ? 'block' : 'none';
                this.updateUI();
            }
        } catch (error) {
            console.error('Error loading user data:', error);
        }
    }

    resizeCanvas() {
        const board = document.querySelector('.game-board');
        this.canvas.width = board.clientWidth;
        this.canvas.height = board.clientHeight;
        this.pegRadius = Math.min(this.canvas.width, this.canvas.height) * 0.012;
        this.ballRadius = this.pegRadius * 1.2;
    }

    setupEventListeners() {
        window.addEventListener('resize', () => {
            this.resizeCanvas();
            this.pegs = [];
            this.createPegs();
        });

        document.getElementById('dropBall').addEventListener('click', () => this.dropBall());

        // Drop ball on canvas click
        this.canvas.addEventListener('click', (e) => {
            if (this.currentBet > 0 && this.balance >= this.currentBet) {
                const rect = this.canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                this.dropBallAt(x);
            } else {
                this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            }
        });
    }

    createPegs() {
        const rows = 10;
        const spacing = this.canvas.height / (rows + 2);
        const horizontalSpacing = this.canvas.width / (rows + 1);

        for (let row = 0; row < rows; row++) {
            const pegsInRow = row + 3;
            const startX = (this.canvas.width - (pegsInRow - 1) * horizontalSpacing) / 2;

            for (let i = 0; i < pegsInRow; i++) {
                this.pegs.push({
                    x: startX + i * horizontalSpacing,
                    y: spacing * (row + 2),
                    radius: this.pegRadius
                });
            }
        }
    }

   createSlots() {
    const slotCount = 7;
    const slotWidth = this.canvas.width / slotCount;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏: –ë–û–õ–¨–®–ò–ï –ø–æ –∫—Ä–∞—è–º (5.8x), –ú–ê–õ–ï–ù–¨–ö–ò–ï –≤ —Ü–µ–Ω—Ç—Ä–µ (0.4x)
    const multipliers = [5.8, 2.2, 0.8, 0.4, 0.8, 2.2, 5.8];
    
    for (let i = 0; i < slotCount; i++) {
        this.slots.push({
            x: i * slotWidth,
            width: slotWidth,
            multiplier: multipliers[i],
            index: i
        });
    }
    
    console.log('üéØ –°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', this.slots.map(s => `${s.multiplier}x`).join(' | '));
}

    async dropBall() {
        if (this.currentBet > 0 && this.balance >= this.currentBet) {
            const x = this.canvas.width / 2;
            this.dropBallAt(x);
        } else {
            this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    }

    async dropBallAt(x) {
        try {
            // üî• –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–ï–†–ï–î –°–¢–ê–í–ö–û–ô
            if (this.balance < this.currentBet) {
                this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                return;
            }

            const response = await fetch('/api/plinko/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    telegramId: this.currentUser.id,
                    betAmount: this.currentBet,
                    rows: 10,
                    demoMode: this.isDemoMode
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏');
            }

            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
                this.balance = result.new_balance;
                this.updateUI();
                
                // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–£ –°–õ–£–ß–ê–ô–ù–´–• –®–ê–†–û–í
                this.ballsDropped++;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —à–∞—Ä —Å–ª—É—á–∞–π–Ω—ã–º
                let isRandomBall = false;
                if (this.ballsDropped >= this.nextRandomBallAt && !this.randomBallActive) {
                    isRandomBall = true;
                    this.randomBallActive = true;
                    this.nextRandomBallAt = this.ballsDropped + Math.floor(Math.random() * 26) + 25; // –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ 25-50 —à–∞—Ä–æ–≤
                    console.log(`üé≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —à–∞—Ä! –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç —á–µ—Ä–µ–∑: ${this.nextRandomBallAt - this.ballsDropped} —à–∞—Ä–æ–≤`);
                }

                // Create ball
                const ball = {
                    x: Math.max(this.ballRadius, Math.min(x, this.canvas.width - this.ballRadius)),
                    y: this.ballRadius,
                    vx: (Math.random() - 0.5) * 2,
                    vy: 0,
                    radius: this.ballRadius,
                    bet: this.currentBet,
                    gameId: result.game_id,
                    isFinished: false,
                    finishedAt: 0,
                    createdAt: Date.now(),
                    isRandomMode: isRandomBall // üî• –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —à–∞—Ä –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º
                };

                this.activeBalls.push(ball);
                this.updateUI();

            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('Drop ball error:', error);
            this.showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏');
        }
    }

    async handleBallInSlot(ball, slotIndex) {
        try {
            // üî• –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –°–õ–£–ß–ê–ô–ù–û–ì–û –®–ê–†–ê –ï–°–õ–ò –ù–£–ñ–ù–û
            if (ball.isRandomMode && this.randomBallActive) {
                this.randomBallActive = false;
                console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑: ${this.nextRandomBallAt - this.ballsDropped} —à–∞—Ä–æ–≤`);
            }

            // üî• –¢–û–ß–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–õ–û–¢–ê –ò –ú–ù–û–ñ–ò–¢–ï–õ–Ø
            const slotWidth = this.canvas.width / this.slots.length;
            const ballCenterX = ball.x;
            const calculatedSlotIndex = Math.floor(ballCenterX / slotWidth);
            const finalSlotIndex = Math.max(0, Math.min(this.slots.length - 1, calculatedSlotIndex));
            
            const realMultiplier = this.slots[finalSlotIndex].multiplier;
            
            console.log(`üéØ –®–∞—Ä–∏–∫ —É–ø–∞–ª –≤ —Å–ª–æ—Ç ${finalSlotIndex}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${realMultiplier}x, —Å–ª—É—á–∞–π–Ω—ã–π: ${ball.isRandomMode}`);

            const response = await fetch('/api/plinko/drop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    gameId: ball.gameId,
                    telegramId: this.currentUser.id,
                    finalSlot: finalSlotIndex,
                    realMultiplier: realMultiplier
                })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–∏–≥—Ä—ã—à–∞');
            }

            const result = await response.json();
            
            if (result.success) {
                // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ë–ê–õ–ê–ù–° –ü–û–°–õ–ï –í–´–ò–ì–†–´–®–ê
                this.balance = result.new_balance;
                this.updateUI();
            }
        } catch (error) {
            console.error('Handle ball error:', error);
        }
    }

   updateBall() {
    for (let i = this.activeBalls.length - 1; i >= 0; i--) {
        const ball = this.activeBalls[i];

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞—Ä–∏–∫–æ–≤
        const currentTime = Date.now();
        const ballLifetime = currentTime - (ball.createdAt || currentTime);
        const isStuckBall = ballLifetime > 10000;
        const isSlowBall = ball.y > this.canvas.height * 0.9 && Math.abs(ball.vy) < 0.1 && ballLifetime > 3000;
        
        if ((ball.isFinished && currentTime - ball.finishedAt > 300) || isStuckBall || isSlowBall) {
            this.activeBalls.splice(i, 1);
            continue;
        }

        if (ball.isFinished) {
            continue;
        }

        // –ë–∞–∑–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞
        ball.vy += this.gravity;
        ball.x += ball.vx;
        ball.y += ball.vy;
        ball.vx *= this.friction;
        ball.vy *= this.friction;

        // üî• –£–°–ò–õ–ï–ù–ù–û–ï –ü–†–ò–¢–Ø–ñ–ï–ù–ò–ï –ö –ú–ê–õ–ï–ù–¨–ö–ò–ú –ú–ù–û–ñ–ò–¢–ï–õ–Ø–ú (0.4x)
        if (!ball.isRandomMode) {
            // üî• –ü–†–ò–¢–Ø–ñ–ï–ù–ò–ï –¢–û–õ–¨–ö–û –ö –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ú–£ –°–õ–û–¢–£ (0.4x)
            const slotWidth = this.canvas.width / 7;
            const targetSlot = 3; // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º 0.4x
            const targetX = (targetSlot + 0.5) * slotWidth;
            
            const distanceToTarget = Math.abs(ball.x - targetX);
            
            // üî• –°–ò–õ–¨–ù–û–ï –ü–†–ò–¢–Ø–ñ–ï–ù–ò–ï –ö –¶–ï–ù–¢–†–£
            if (distanceToTarget > 2) {
                // –£—Å–∏–ª–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
                const basePullStrength = 0.015; // –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
                
                // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                const distanceCorrection = (distanceToTarget / this.canvas.width) * 0.025;
                
                const totalPullStrength = basePullStrength + distanceCorrection;
                
                // –ü—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É
                const pullDirection = targetX - ball.x;
                ball.vx += pullDirection * totalPullStrength;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
                ball.vy += 0.008;
            }
            
            // üî• –û–ß–ï–ù–¨ –°–ò–õ–¨–ù–û–ï –ü–†–ò–¢–Ø–ñ–ï–ù–ò–ï –í –ù–ò–ñ–ù–ï–ô –ß–ê–°–¢–ò
            if (ball.y > this.canvas.height * 0.6) { // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–Ω—å—à–µ
                const extraPull = 0.02; // –£—Å–∏–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ
                const pullDirection = targetX - ball.x;
                ball.vx += pullDirection * extraPull;
                
                // –°–∏–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ü–µ–ª–∏
                if (distanceToTarget < slotWidth * 0.5) {
                    ball.vx *= 0.9;
                }
            }
            
            // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –î–õ–Ø –¢–û–ß–ù–û–°–¢–ò
            if (ball.y > this.canvas.height * 0.8) {
                const precisionPull = 0.03;
                const pullDirection = targetX - ball.x;
                ball.vx += pullDirection * precisionPull;
                
                // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—è–¥–æ–º —Å —Ü–µ–ª–µ–≤—ã–º —Å–ª–æ—Ç–æ–º
                if (distanceToTarget < slotWidth * 0.2) {
                    ball.vx *= 0.8;
                }
            }
        } else {
            // üî• –°–õ–£–ß–ê–ô–ù–´–ô –®–ê–†: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, —á–∏—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è —É —Å—Ç–µ–Ω–æ–∫
            if (ball.x < this.ballRadius * 2) {
                ball.vx += 0.015;
            } else if (ball.x > this.canvas.width - this.ballRadius * 2) {
                ball.vx -= 0.015;
            }
            
            // –°–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            ball.vx += (Math.random() - 0.5) * 0.02;
        }

        // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏
        if (ball.x - ball.radius < 0 || ball.x + ball.radius > this.canvas.width) {
            ball.vx *= -this.bounce;
            ball.x = ball.x - ball.radius < 0 ? ball.radius : this.canvas.width - ball.radius;
        }

        // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∫–æ–ª—ã—à–∫–∞–º–∏
        this.pegs.forEach(peg => {
            const dx = ball.x - peg.x;
            const dy = ball.y - peg.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < ball.radius + peg.radius) {
                const angle = Math.atan2(dy, dx);
                const speed = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);
                
                const randomAngle = angle + (Math.random() - 0.5) * 0.1;
                
                ball.vx = Math.cos(randomAngle) * speed * this.bounce;
                ball.vy = Math.sin(randomAngle) * speed * this.bounce;
                
                const minDistance = ball.radius + peg.radius;
                ball.x = peg.x + Math.cos(angle) * minDistance;
                ball.y = peg.y + Math.sin(angle) * minDistance;
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∏–∑–∞
        const bottomThreshold = this.canvas.height - 15;
        const isAtBottom = ball.y + ball.radius > bottomThreshold;
        
        if (isAtBottom && !ball.isFinished) {
            ball.isFinished = true;
            ball.finishedAt = Date.now();
            
            const slotWidth = this.canvas.width / this.slots.length;
            const ballCenterX = ball.x;
            const slotIndex = Math.floor(ballCenterX / slotWidth);
            const finalSlotIndex = Math.max(0, Math.min(this.slots.length - 1, slotIndex));
            
            console.log(`üéØ –®–∞—Ä–∏–∫ —É–ø–∞–ª –≤ —Å–ª–æ—Ç ${finalSlotIndex}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${this.slots[finalSlotIndex].multiplier}x, —Å–ª—É—á–∞–π–Ω—ã–π: ${ball.isRandomMode}`);
            
            setTimeout(() => {
                this.handleBallInSlot(ball, finalSlotIndex);
            }, 100);
        }
    }
}

    drawGame() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw pegs
        this.pegs.forEach(peg => {
            this.ctx.beginPath();
            this.ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            this.ctx.fill();
        });

        // Draw balls
        this.activeBalls.forEach(ball => {
            if (ball.isFinished) return;
            
            this.ctx.beginPath();
            this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            
            // üî• –†–ê–ó–ù–´–ô –¶–í–ï–¢ –î–õ–Ø –†–ï–ñ–ò–ú–û–í
            if (ball.isRandomMode) {
                this.ctx.fillStyle = '#ff6b35'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            } else {
                this.ctx.fillStyle = '#1e5cb8'; // –°–∏–Ω–∏–π –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
            }
            
            this.ctx.fill();
            
            // Add glow
            this.ctx.shadowBlur = 10;
            this.ctx.shadowColor = ball.isRandomMode ? '#ff6b35' : '#1e5cb8';
            this.ctx.fill();
            this.ctx.shadowBlur = 0;
        });
    }

    gameLoop() {
        this.drawGame();
        this.updateBall();
        requestAnimationFrame(() => this.gameLoop());
    }

    updateUI() {
        document.getElementById('balance').textContent = this.balance.toFixed(2);
        document.getElementById('currentBet').textContent = this.currentBet.toFixed(1) + ' TON';
        
        document.getElementById('betAmount').value = this.currentBet.toFixed(1);

        const dropButton = document.getElementById('dropBall');
        dropButton.disabled = this.currentBet === 0 || this.currentBet > this.balance;
        
        if (this.currentBet > this.balance) {
            dropButton.style.background = 'linear-gradient(135deg, #ff4757, #ff6b81)';
            dropButton.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
        } else {
            dropButton.style.background = 'linear-gradient(135deg, #1e5cb8, #2668b3)';
            dropButton.textContent = '–ë—Ä–æ—Å–∏—Ç—å —à–∞—Ä';
        }
    }

    decreaseBet() {
        if (this.currentBet > 0.1) {
            this.currentBet = Math.max(0.1, this.currentBet - 0.1);
            this.updateUI();
        }
    }

    increaseBet() {
        if (this.currentBet < 100) {
            this.currentBet = Math.min(100, this.currentBet + 0.1);
            this.updateUI();
        }
    }

    validateBetAmount() {
        const betInput = document.getElementById('betAmount');
        let value = parseFloat(betInput.value);
        
        if (isNaN(value)) {
            value = 0.1;
        }
        
        value = Math.max(0.1, Math.min(100, value));
        betInput.value = value.toFixed(1);
        this.currentBet = value;
        this.updateUI();
    }

    showToast(type, title, message, duration = 3000) {
        if (type !== 'error') return;
        
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        const icons = {
            error: 'bi bi-x-circle-fill'
        };
        
        toast.innerHTML = `
            <i class="toast-icon ${icons[type]}"></i>
            <div class="toast-content">
                <div class="toast-title">${title}</div>
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="this.parentElement.remove()">
                <i class="bi bi-x"></i>
            </button>
        `;
        
        toastContainer.appendChild(toast);
        
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, duration);
    }

    showError(message) {
        this.showToast('error', '–û—à–∏–±–∫–∞', message);
    }
}

// Global functions
function goBack() {
    window.location.href = 'index.html';
}

function decreaseBet() {
    window.plinkoGame.decreaseBet();
}

function increaseBet() {
    window.plinkoGame.increaseBet();
}

function validateBetAmount() {
    window.plinkoGame.validateBetAmount();
}

async function openDepositModal() {
    document.getElementById('deposit-modal').style.display = 'block';
}

function closeDepositModal() {
    document.getElementById('deposit-modal').style.display = 'none';
    document.getElementById('deposit-amount').value = '';
}

async function processDeposit() {
    const amount = parseFloat(document.getElementById('deposit-amount').value);
    
    if (!amount || amount < 1) {
        alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 1 TON');
        return;
    }

    try {
        const response = await fetch('/api/create-invoice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                telegramId: window.plinkoGame.currentUser.id,
                amount: amount,
                demoMode: window.plinkoGame.isDemoMode
            })
        });

        const result = await response.json();
        
        if (result.success) {
            if (window.plinkoGame.isDemoMode) {
                await window.plinkoGame.loadUserData();
                alert(`–î–µ–º–æ-–¥–µ–ø–æ–∑–∏—Ç ${amount} TON —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!`);
            } else {
                window.open(result.invoice_url, '_blank');
                alert(`–û—Ç–∫—Ä–æ–π—Ç–µ Crypto Bot –¥–ª—è –æ–ø–ª–∞—Ç—ã ${amount} TON`);
            }
            
            closeDepositModal();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ' + result.error);
        }
    } catch (error) {
        console.error('Deposit error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
    }
}

window.addEventListener('load', () => {
    window.plinkoGame = new PlinkoGame();
});

window.onclick = function(event) {
    const modal = document.getElementById('deposit-modal');
    if (event.target === modal) {
        closeDepositModal();
    }
}
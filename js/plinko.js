class PlinkoGame {
    constructor() {
        // Game state
        this.currentUser = null;
        this.isDemoMode = false;
        this.currentBet = 0.1;
        this.balance = 0;
        this.difficultyMode = 'easy';
        
        // Canvas setup
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.resizeCanvas();

        // Game elements
        this.activeBalls = [];
        this.pegs = [];
        this.slots = [];

        // üî• –§–ò–ó–ò–ö–ê –ö–ê–ö –í 1WIN - –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨
        this.gravity = 0.8; // –£–≤–µ–ª–∏—á–∏–ª –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        this.bounce = 0.65; // –ú–µ–Ω—å—à–µ –æ—Ç—Å–∫–æ–∫ - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
        this.friction = 0.985; // –ú–µ–Ω—å—à–µ —Ç—Ä–µ–Ω–∏–µ - –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏—è

        // üî• –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ë–û–õ–¨–®–ò–• –í–´–ò–ì–†–´–®–ï–ô
        this.ballsDropped = 0;
        this.bigWinCounter = 0;
        this.nextBigWinAt = Math.floor(Math.random() * 15) + 10; // 10-25 —à–∞—Ä–æ–≤
        this.consecutiveSmallWins = 0;

        this.setupEventListeners();
        this.createPegs();
        this.createSlots();
        this.initializeUser();
        this.gameLoop();
    }

    // üî• –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ö–ê–ö –í 1WIN
    generatePlinkoResult() {
        const random = Math.random() * 100;
        
        // üî• –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: 70% –º–∞–ª—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏, 25% —Å—Ä–µ–¥–Ω–∏–µ, 5% –∫—Ä—É–ø–Ω—ã–µ
        if (this.bigWinCounter > 0) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
            this.bigWinCounter--;
            const bigMultipliers = [5.8, 8.4, 15.6, 26.0, 100.0];
            return bigMultipliers[Math.floor(Math.random() * bigMultipliers.length)];
        }

        if (random < 70) {
            // 70% - –º–∞–ª—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ (0.2x - 1.5x)
            this.consecutiveSmallWins++;
            return 0.2 + Math.random() * 1.3;
        } else if (random < 95) {
            // 25% - —Å—Ä–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ (1.5x - 5x)
            this.consecutiveSmallWins = 0;
            return 1.5 + Math.random() * 3.5;
        } else {
            // 5% - –∫—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ (5x - 100x)
            this.consecutiveSmallWins = 0;
            
            // –ü–æ—Å–ª–µ 10+ –º–∞–ª—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –±–æ–ª—å—à–æ–≥–æ
            if (this.consecutiveSmallWins >= 10) {
                return 20 + Math.random() * 80;
            }
            
            return 5 + Math.random() * 95;
        }
    }

    // üî• –§–ò–ó–ò–ö–ê –° –í–´–°–û–ö–û–ô –°–õ–£–ß–ê–ô–ù–û–°–¢–¨–Æ –ö–ê–ö –í 1WIN
    updateBall() {
        for (let i = this.activeBalls.length - 1; i >= 0; i--) {
            const ball = this.activeBalls[i];

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —à–∞—Ä–æ–≤
            const currentTime = Date.now();
            const ballLifetime = currentTime - (ball.createdAt || currentTime);
            if ((ball.isFinished && currentTime - ball.finishedAt > 300) || ballLifetime > 15000) {
                this.activeBalls.splice(i, 1);
                continue;
            }

            if (ball.isFinished) continue;

            // üî• –£–°–ò–õ–ï–ù–ù–ê–Ø –§–ò–ó–ò–ö–ê –° –ë–û–õ–¨–®–ï–ô –°–õ–£–ß–ê–ô–ù–û–°–¢–¨–Æ
            ball.vy += this.gravity;
            
            // üî• –°–ò–õ–¨–ù–´–ï –°–õ–£–ß–ê–ô–ù–´–ï –í–û–ó–î–ï–ô–°–¢–í–ò–Ø –ö–ê–ö –í 1WIN
            ball.vx += (Math.random() - 0.5) * 0.8; // –£–≤–µ–ª–∏—á–∏–ª —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            ball.vy += (Math.random() - 0.5) * 0.3;
            
            ball.x += ball.vx;
            ball.y += ball.vy;
            ball.vx *= this.friction;
            ball.vy *= this.friction;

            // üî• –•–ê–û–¢–ò–ß–ï–°–ö–û–ï –î–í–ò–ñ–ï–ù–ò–ï - –®–ê–†–ò–ö –ú–û–ñ–ï–¢ –ü–û–õ–ï–¢–ï–¢–¨ –ö–£–î–ê –£–ì–û–î–ù–û
            if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –Ω–∞ —Ä–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
                ball.vx += (Math.random() - 0.5) * 4;
                ball.vy += (Math.random() - 0.3) * 2;
            }

            // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏
            if (ball.x - ball.radius < 0 || ball.x + ball.radius > this.canvas.width) {
                ball.vx *= -this.bounce;
                // üî• –°–õ–£–ß–ê–ô–ù–´–ô –û–¢–°–ö–û–ö –û–¢ –°–¢–ï–ù–û–ö
                ball.vx += (Math.random() - 0.5) * 2;
                ball.x = ball.x - ball.radius < 0 ? ball.radius : this.canvas.width - ball.radius;
            }

            // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∫–æ–ª—ã—à–∫–∞–º–∏ - –ë–û–õ–ï–ï –•–ê–û–¢–ò–ß–ù–´–ï
            this.pegs.forEach(peg => {
                const dx = ball.x - peg.x;
                const dy = ball.y - peg.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < ball.radius + peg.radius) {
                    const angle = Math.atan2(dy, dx);
                    const speed = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);
                    
                    // üî• –°–õ–£–ß–ê–ô–ù–´–ô –£–ì–û–õ –û–¢–°–ö–û–ö–ê –ö–ê–ö –í 1WIN
                    const randomBounce = angle + (Math.random() - 0.5) * 1.0; // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–±—Ä–æ—Å
                    
                    ball.vx = Math.cos(randomBounce) * speed * this.bounce;
                    ball.vy = Math.sin(randomBounce) * speed * this.bounce;
                    
                    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –°–õ–£–ß–ê–ô–ù–´–ô –ò–ú–ü–£–õ–¨–°
                    ball.vx += (Math.random() - 0.5) * 1.5;
                    ball.vy += (Math.random() - 0.5) * 1.0;
                    
                    const minDistance = ball.radius + peg.radius;
                    ball.x = peg.x + Math.cos(angle) * minDistance;
                    ball.y = peg.y + Math.sin(angle) * minDistance;
                }
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∏–∑–∞
            const bottomThreshold = this.canvas.height - 15;
            const isAtBottom = ball.y + ball.radius > bottomThreshold;
            
            if (isAtBottom && !ball.isFinished) {
                ball.isFinished = true;
                ball.finishedAt = Date.now();
                
                // üî• –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–û –ê–õ–ì–û–†–ò–¢–ú–£ 1WIN
                this.ballsDropped++;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
                if (this.ballsDropped >= this.nextBigWinAt) {
                    this.bigWinCounter = 1 + Math.floor(Math.random() * 2); // 1-2 –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–∞
                    this.nextBigWinAt = this.ballsDropped + Math.floor(Math.random() * 20) + 15; // 15-35 —à–∞—Ä–æ–≤
                    console.log(`üé∞ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ë–û–õ–¨–®–û–ô –í–´–ò–ì–†–´–®! –û—Å—Ç–∞–ª–æ—Å—å: ${this.bigWinCounter}`);
                }

                const finalMultiplier = this.generatePlinkoResult();
                
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é
                let closestSlot = 0;
                let minDiff = Infinity;
                
                this.slots.forEach((slot, index) => {
                    const diff = Math.abs(slot.multiplier - finalMultiplier);
                    if (diff < minDiff) {
                        minDiff = diff;
                        closestSlot = index;
                    }
                });

                console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${finalMultiplier.toFixed(2)}x, —Å–ª–æ—Ç: ${closestSlot}`);
                
                setTimeout(() => {
                    this.handleBallInSlot(ball, closestSlot, finalMultiplier);
                }, 100);
            }
        }
    }

    async handleBallInSlot(ball, slotIndex, realMultiplier) {
        try {
            const response = await fetch('/api/plinko/drop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    gameId: ball.gameId,
                    telegramId: this.currentUser.id,
                    finalSlot: slotIndex,
                    realMultiplier: realMultiplier
                })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–∏–≥—Ä—ã—à–∞');
            }

            const result = await response.json();
            
            if (result.success) {
                this.balance = result.new_balance;
                this.updateUI();
                
                // üî• –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ë–û–õ–¨–®–û–ú –í–´–ò–ì–†–´–®–ï
                if (realMultiplier >= 10) {
                    this.showBigWinNotification(realMultiplier, result.win_amount);
                }
            }
        } catch (error) {
            console.error('Handle ball error:', error);
        }
    }

    // üî• –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–†–£–ü–ù–´–• –í–´–ò–ì–†–´–®–ï–ô
    showBigWinNotification(multiplier, winAmount) {
        const notification = document.createElement('div');
        notification.className = 'big-win-notification';
        notification.innerHTML = `
            <div class="big-win-content">
                <div class="big-win-icon">üé∞</div>
                <div class="big-win-text">
                    <div class="big-win-title">–û–ì–†–û–ú–ù–´–ô –í–´–ò–ì–†–´–®!</div>
                    <div class="big-win-multiplier">${multiplier.toFixed(2)}x</div>
                    <div class="big-win-amount">+${winAmount.toFixed(2)} TON</div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 100);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 1000);
        }, 5000);
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    createPegs() {
        const rows = 12; // –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        const verticalSpacing = this.canvas.height / (rows + 2);
        const baseHorizontalSpacing = this.canvas.width / (rows + 1);
        const sideMargin = this.pegRadius + 2;

        for (let row = 0; row < rows; row++) {
            const pegsInRow = row + 3;
            let rowSpacing = baseHorizontalSpacing;
            let rowWidth = (pegsInRow - 1) * rowSpacing;
            const maxRowWidth = this.canvas.width - sideMargin * 2;

            if (rowWidth > maxRowWidth) {
                rowSpacing = maxRowWidth / (pegsInRow - 1);
                rowWidth = maxRowWidth;
            }

            const startX = (this.canvas.width - rowWidth) / 2;

            for (let i = 0; i < pegsInRow; i++) {
                // üî• –°–õ–£–ß–ê–ô–ù–û–ï –°–ú–ï–©–ï–ù–ò–ï –ö–û–õ–´–®–ö–û–í –î–õ–Ø –ë–û–õ–¨–®–ï–ì–û –•–ê–û–°–ê
                const randomOffset = (Math.random() - 0.5) * 8;
                this.pegs.push({
                    x: startX + i * rowSpacing + randomOffset,
                    y: verticalSpacing * (row + 2) + (Math.random() - 0.5) * 5,
                    radius: this.pegRadius
                });
            }
        }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// üî• CSS –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ë–û–õ–¨–®–ò–• –í–´–ò–ì–†–´–®–ê–•
const bigWinCSS = `
.big-win-notification {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.5);
    background: linear-gradient(135deg, #ffd700, #ff6b00);
    border: 3px solid #ffeb3b;
    border-radius: 20px;
    padding: 20px;
    color: #000;
    font-weight: bold;
    text-align: center;
    z-index: 10000;
    opacity: 0;
    transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    box-shadow: 0 0 50px rgba(255, 215, 0, 0.8);
}

.big-win-notification.show {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

.big-win-content {
    display: flex;
    align-items: center;
    gap: 15px;
}

.big-win-icon {
    font-size: 3em;
    animation: bounce 0.5s infinite alternate;
}

.big-win-text {
    text-align: left;
}

.big-win-title {
    font-size: 1.2em;
    margin-bottom: 5px;
}

.big-win-multiplier {
    font-size: 2em;
    color: #e91e63;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.big-win-amount {
    font-size: 1.5em;
    color: #4caf50;
}

@keyframes bounce {
    from { transform: scale(1); }
    to { transform: scale(1.2); }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const style = document.createElement('style');
style.textContent = bigWinCSS;
document.head.appendChild(style);
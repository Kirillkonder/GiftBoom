// balanceRoutes.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò –°–û–î–ï–†–ñ–ò–ú–û–ï
const express = require('express');
const router = express.Router();
const { User, Transaction, PromoCode } = require('./database');

module.exports = function(db, cryptoPayRequest, updateCasinoBank, updateCasinoDemoBank, updateRTPStats) {

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ë–ï–ó –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ used_count)
  async function calculatePromoCode(telegramId, promoCode, depositAmount) {
    console.log(`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
    
    const promo = await PromoCode.findOne({ 
      where: { 
        code: promoCode.toUpperCase(),
        is_active: true 
      }
    });
    
    if (!promo) {
      console.log(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
      return { success: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: ${promo.code}, –±–æ–Ω—É—Å: ${promo.bonus_percent}%, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.used_count || 0}/${promo.max_uses || '–±–µ–∑–ª–∏–º–∏—Ç'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if (promo.max_uses && (promo.used_count || 0) >= promo.max_uses) {
      console.log(`‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω: ${promo.used_count}/${promo.max_uses}`);
      return { success: false, error: '–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω' };
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findByPk(parseInt(telegramId));
    if (!user) {
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    const userUsedPromo = await Transaction.findOne({
      where: {
        user_id: user.telegram_id,
        promo_code: promo.code,
        status: 'completed'
      }
    });

    if (userUsedPromo) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${promo.code}`);
      return { success: false, error: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥' };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
    const bonusAmount = Number(depositAmount) * (promo.bonus_percent / 100);
    const totalAmount = Number(depositAmount) + bonusAmount;
    
    console.log(`üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ ${promo.code}:`);
    console.log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç: ${depositAmount} TON`);
    console.log(`   üéÅ –ë–æ–Ω—É—Å: +${bonusAmount.toFixed(2)} TON (${promo.bonus_percent}%)`);
    console.log(`   üíé –ò—Ç–æ–≥–æ: ${totalAmount.toFixed(2)} TON`);
    
    return {
      success: true,
      bonusAmount: bonusAmount,
      bonusPercent: promo.bonus_percent,
      totalAmount: totalAmount,
      promo: {
        code: promo.code,
        bonus_percent: promo.bonus_percent,
        description: promo.description,
        used_count: promo.used_count || 0,
        max_uses: promo.max_uses,
        is_public: promo.is_public
      }
    };
  }

  // API: –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
  router.post('/create-invoice', async (req, res) => {
    const { telegramId, amount, demoMode, promoCode } = req.body;

    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId}, —Å—É–º–º–∞ ${amount}, –¥–µ–º–æ: ${demoMode}, –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode}`);

    try {
      const user = await User.findByPk(parseInt(telegramId));
      
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      const amt = Number(amount);
      if (!amt || amt < 0.3) {
        return res.status(400).json({ error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 0.3 TON' });
      }

      let finalAmount = amt;
      let bonusAmount = 0;
      let appliedPromoCode = null;
      let promoResult = null;

      // üî• –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–†–û–ú–û–ö–û–î (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç, used_count –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
      if (promoCode && !demoMode) {
        console.log(`üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode}`);
        promoResult = await calculatePromoCode(telegramId, promoCode, amt);
        if (promoResult.success) {
          finalAmount = promoResult.totalAmount;
          bonusAmount = promoResult.bonusAmount;
          appliedPromoCode = promoCode.toUpperCase();
          console.log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω: +${bonusAmount.toFixed(2)} TON (${promoResult.bonusPercent}%)`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoResult.error}`);
          return res.status(400).json({ error: promoResult.error });
        }
      } else if (promoCode && demoMode) {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ`);
      }

      const invoice = await cryptoPayRequest('createInvoice', {
        asset: 'TON',
        amount: amt.toString(),
        description: `Deposit for user ${telegramId}`,
        hidden_message: `Deposit ${amt} TON${bonusAmount > 0 ? ` + ${bonusAmount.toFixed(2)} TON bonus (${appliedPromoCode})` : ''}`,
        payload: JSON.stringify({
          telegram_id: telegramId,
          demo_mode: demoMode,
          amount: amt,
          final_amount: finalAmount,
          bonus_amount: bonusAmount,
          promo_code: appliedPromoCode
        }),
        paid_btn_name: 'callback',
        paid_btn_url: 'https://t.me/your_bot',
        allow_comments: false
      }, demoMode);

      if (invoice.ok && invoice.result) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ pending
        await Transaction.create({
          user_id: user.telegram_id,
          amount: finalAmount,
          original_amount: amt,
          bonus_amount: bonusAmount,
          type: 'deposit',
          status: 'pending',
          invoice_id: invoice.result.invoice_id,
          demo_mode: demoMode,
          promo_code: appliedPromoCode
        });
        
        console.log(`‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: ${invoice.result.invoice_id}`);
        
        res.json({
          success: true,
          invoice_url: invoice.result.pay_url,
          invoice_id: invoice.result.invoice_id,
          bonus_applied: bonusAmount > 0,
          bonus_amount: bonusAmount,
          bonus_percent: promoResult ? promoResult.bonusPercent : 0,
          final_amount: finalAmount,
          promo_code: appliedPromoCode
        });
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:`, invoice);
        res.status(500).json({ error: 'Failed to create invoice' });
      }
    } catch (error) {
      console.error('Create invoice error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  // API: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ (üî• –ó–î–ï–°–¨ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º used_count –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ)
  router.post('/check-invoice', async (req, res) => {
    const { invoiceId, demoMode } = req.body;

    try {
      const invoice = await cryptoPayRequest('getInvoices', {
        invoice_ids: invoiceId
      }, demoMode);

      if (invoice.ok && invoice.result.items.length > 0) {
        const invoiceData = invoice.result.items[0];
        
        if (invoiceData.status === 'paid') {
          const transaction = await Transaction.findOne({ where: { invoice_id: invoiceId } });
          
          if (transaction && transaction.status === 'pending') {
            const user = await User.findByPk(transaction.user_id);
            const depositAmount = transaction.amount || 0;
            
            if (demoMode) {
              await User.update({
                demo_balance: parseFloat(user.demo_balance) + parseFloat(depositAmount),
                total_deposits: parseFloat(user.total_deposits || 0) + parseFloat(depositAmount)
              }, { where: { telegram_id: user.telegram_id } });
            } else {
              await User.update({
                main_balance: parseFloat(user.main_balance) + parseFloat(depositAmount),
                total_deposits: parseFloat(user.total_deposits || 0) + parseFloat(depositAmount)
              }, { where: { telegram_id: user.telegram_id } });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await Transaction.update({
              status: 'completed',
              updated_at: new Date()
            }, { where: { id: transaction.id } });

            // üî• –û–ë–ù–û–í–õ–Ø–ï–ú RTP –°–¢–ê–¢–ò–°–¢–ò–ö–£
            if (!demoMode) {
              updateRTPStats('realBank', depositAmount, 0);
            }

            // üî• –ò–ù–ö–†–ï–ú–ï–ù–¢ –ü–†–û–ú–û–ö–û–î–ê –¢–û–õ–¨–ö–û –ü–†–ò –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–ï
            if (!demoMode && transaction.promo_code) {
              const promo = await PromoCode.findOne({ where: { code: transaction.promo_code } });
              
              if (promo) {
                const newUsedCount = (promo.used_count || 0) + 1;
                await PromoCode.update({
                  used_count: newUsedCount
                }, { where: { id: promo.id } });
                console.log(`üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ ${promo.code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –°—á–µ—Ç—á–∏–∫: ${newUsedCount}/${promo.max_uses || '‚àû'}`);
              }
            }

            res.json({ 
              success: true, 
              status: 'paid',
              amount: depositAmount,
              bonus_amount: transaction.bonus_amount || 0,
              promo_code: transaction.promo_code
            });
          } else {
            res.json({ success: false, status: 'not_found' });
          }
        } else {
          res.json({ success: true, status: invoiceData.status });
        }
      } else {
        res.json({ success: false, status: 'not_found' });
      }
    } catch (error) {
      console.error('Check invoice error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  // API: –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  router.post('/create-withdrawal', async (req, res) => {
    const { telegramId, amount, address, demoMode } = req.body;

    try {
      const user = await User.findByPk(parseInt(telegramId));
      
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      const balance = demoMode ? user.demo_balance : user.main_balance;
      
      if (parseFloat(balance) < parseFloat(amount)) {
        return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—ã–≥—Ä—ã—à–∞ x3
      const totalDeposits = user.total_deposits || 0;
      const requiredWager = totalDeposits * 3;
      
      const userTransactions = await Transaction.findAll({ 
        where: { 
          user_id: user.telegram_id, 
          demo_mode: demoMode,
          status: 'completed'
        }
      });
      
      const totalWagered = userTransactions
        .filter(t => t.type.includes('loss') || t.type.includes('bet'))
        .reduce((sum, t) => sum + Math.abs(parseFloat(t.amount)), 0);

      if (totalWagered < requiredWager) {
        const remaining = requiredWager - totalWagered;
        return res.status(400).json({ 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç—ã–≥—Ä—ã—à–∞',
          wagered: totalWagered,
          required: requiredWager,
          remaining: remaining,
          message: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –µ—â–µ ${remaining.toFixed(2)} TON (x3 –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤)`
        });
      }

      if (demoMode) {
        await User.update({
          demo_balance: parseFloat(user.demo_balance) - parseFloat(amount)
        }, { where: { telegram_id: user.telegram_id } });

        await Transaction.create({
          user_id: user.telegram_id,
          amount: -parseFloat(amount),
          type: 'withdrawal',
          status: 'completed',
          demo_mode: true,
          address: address
        });

        res.json({
          success: true,
          message: 'Withdrawal completed (demo mode)',
          new_balance: parseFloat(user.demo_balance) - parseFloat(amount)
        });
      } else {
        const transfer = await cryptoPayRequest('transfer', {
          user_id: telegramId,
          asset: 'TON',
          amount: amount.toString(),
          spend_id: `withdrawal_${Date.now()}_${telegramId}`
        }, false);

        if (transfer.ok && transfer.result) {
          await User.update({
            main_balance: parseFloat(user.main_balance) - parseFloat(amount)
          }, { where: { telegram_id: user.telegram_id } });
          
          await updateCasinoBank(-parseFloat(amount));

          await Transaction.create({
            user_id: user.telegram_id,
            amount: -parseFloat(amount),
            type: 'withdrawal',
            status: 'completed',
            demo_mode: false,
            address: address,
            hash: transfer.result.hash
          });

          res.json({
            success: true,
            message: 'Withdrawal completed',
            hash: transfer.result.hash,
            new_balance: parseFloat(user.main_balance) - parseFloat(amount)
          });
        } else {
          res.status(500).json({ error: 'Withdrawal failed' });
        }
      }
    } catch (error) {
      console.error('Create withdrawal error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  // API: –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  router.get('/transactions/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    try {
      const user = await User.findByPk(telegramId);
      
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      const userTransactions = await Transaction.findAll({ 
        where: { user_id: user.telegram_id },
        order: [['created_at', 'DESC']],
        limit: 50
      });

      res.json(userTransactions);
    } catch (error) {
      console.error('Get transactions error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  // API: –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  router.get('/user/balance/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);
    const isAdminUser = telegramId === 842428912 || telegramId === 1135073023;

    try {
      let user = await User.findByPk(telegramId);
      
      if (!user) {
        user = await User.create({
          telegram_id: telegramId,
          main_balance: 0,
          demo_balance: isAdminUser ? 50 : 0,
          total_deposits: 0,
          demo_mode: false,
          is_admin: telegramId === parseInt(process.env.OWNER_TELEGRAM_ID) || telegramId === 1135073023
        });

        return res.json({
          telegram_id: user.telegram_id,
          main_balance: user.main_balance,
          demo_balance: user.demo_balance,
          demo_mode: user.demo_mode,
          is_admin: user.is_admin,
          total_deposits: 0
        });
      }

      res.json({
        telegram_id: user.telegram_id,
        main_balance: user.main_balance || 0,
        demo_balance: user.demo_balance || 0,
        demo_mode: user.demo_mode || false,
        is_admin: user.is_admin || false,
        total_deposits: user.total_deposits || 0
      });
    } catch (error) {
      console.error('Get balance error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  // API: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º
  router.post('/user/toggle-demo-mode', async (req, res) => {
    const { telegramId } = req.body;

    try {
      const user = await User.findByPk(parseInt(telegramId));
      
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      const newDemoMode = !user.demo_mode;
      
      await User.update({
        demo_mode: newDemoMode
      }, { where: { telegram_id: user.telegram_id } });

      res.json({
        success: true,
        demo_mode: newDemoMode
      });
    } catch (error) {
      console.error('Toggle demo mode error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });

  return router;
};
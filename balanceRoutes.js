const express = require('express');
const router = express.Router();

module.exports = function(db, dbFunctions) {
    const {
        findUserByTelegramId, createUser, updateUserBalance, toggleDemoMode,
        createTransaction, findTransactionByInvoiceId, updateTransactionStatus, getUserTransactions,
        getCasinoBank, getCasinoDemoBank, updateCasinoBank, updateCasinoDemoBank,
        findPromoCode, updatePromoCodeUsedCount,
        updateRTPStats
    } = dbFunctions;

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async function calculatePromoCode(telegramId, promoCode, depositAmount) {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
        
        const promo = await findPromoCode(promoCode);
        
        if (!promo) {
            console.log(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
            return { success: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: ${promo.code}, –±–æ–Ω—É—Å: ${promo.bonus_percent}%, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.used_count || 0}/${promo.max_uses || '–±–µ–∑–ª–∏–º–∏—Ç'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if (promo.max_uses && (promo.used_count || 0) >= promo.max_uses) {
            console.log(`‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω: ${promo.used_count}/${promo.max_uses}`);
            return { success: false, error: '–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω' };
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await findUserByTelegramId(telegramId);
        if (!user) {
            return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        const userTransactions = await getUserTransactions(user.id);
        const userUsedPromo = userTransactions.find(t => 
            t.promo_code === promo.code && t.status === 'completed'
        );

        if (userUsedPromo) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${promo.code}`);
            return { success: false, error: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥' };
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        const bonusAmount = Number(depositAmount) * (promo.bonus_percent / 100);
        const totalAmount = Number(depositAmount) + bonusAmount;
        
        console.log(`üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ ${promo.code}:`);
        console.log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç: ${depositAmount} TON`);
        console.log(`   üéÅ –ë–æ–Ω—É—Å: +${bonusAmount.toFixed(2)} TON (${promo.bonus_percent}%)`);
        console.log(`   üíé –ò—Ç–æ–≥–æ: ${totalAmount.toFixed(2)} TON`);
        
        return {
            success: true,
            bonusAmount: bonusAmount,
            bonusPercent: promo.bonus_percent,
            totalAmount: totalAmount,
            promo: {
                code: promo.code,
                bonus_percent: promo.bonus_percent,
                description: promo.description,
                used_count: promo.used_count || 0,
                max_uses: promo.max_uses,
                is_public: promo.is_public
            }
        };
    }

    // API: –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
    router.post('/create-invoice', async (req, res) => {
        const { telegramId, amount, demoMode, promoCode } = req.body;

        console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId}, —Å—É–º–º–∞ ${amount}, –¥–µ–º–æ: ${demoMode}, –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode}`);

        try {
            let user = await findUserByTelegramId(parseInt(telegramId));
            
            if (!user) {
                user = await createUser(parseInt(telegramId));
            }

            const amt = Number(amount);
            if (!amt || amt < 0.3) {
                return res.status(400).json({ error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 0.3 TON' });
            }

            let finalAmount = amt;
            let bonusAmount = 0;
            let appliedPromoCode = null;
            let promoResult = null;

            // üî• –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–†–û–ú–û–ö–û–î (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç, used_count –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
            if (promoCode && !demoMode) {
                console.log(`üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode}`);
                promoResult = await calculatePromoCode(telegramId, promoCode, amt);
                if (promoResult.success) {
                    finalAmount = promoResult.totalAmount;
                    bonusAmount = promoResult.bonusAmount;
                    appliedPromoCode = promoCode.toUpperCase();
                    console.log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω: +${bonusAmount.toFixed(2)} TON (${promoResult.bonusPercent}%)`);
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoResult.error}`);
                    return res.status(400).json({ error: promoResult.error });
                }
            } else if (promoCode && demoMode) {
                console.log(`‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ`);
            }

            const invoice = await cryptoPayRequest('createInvoice', {
                asset: 'TON',
                amount: amt.toString(),
                description: `Deposit for user ${telegramId}`,
                hidden_message: `Deposit ${amt} TON${bonusAmount > 0 ? ` + ${bonusAmount.toFixed(2)} TON bonus (${appliedPromoCode})` : ''}`,
                payload: JSON.stringify({
                    telegram_id: telegramId,
                    demo_mode: demoMode,
                    amount: amt,
                    final_amount: finalAmount,
                    bonus_amount: bonusAmount,
                    promo_code: appliedPromoCode
                }),
                paid_btn_name: 'callback',
                paid_btn_url: 'https://t.me/your_bot',
                allow_comments: false
            }, demoMode);

            if (invoice.ok && invoice.result) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ pending
                await createTransaction({
                    user_id: user.id,
                    amount: finalAmount,
                    original_amount: amt,
                    bonus_amount: bonusAmount,
                    type: 'deposit',
                    status: 'pending',
                    invoice_id: invoice.result.invoice_id,
                    demo_mode: demoMode,
                    promo_code: appliedPromoCode
                });

                console.log(`‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: ${invoice.result.invoice_id}`);
                
                res.json({
                    success: true,
                    invoice_url: invoice.result.pay_url,
                    invoice_id: invoice.result.invoice_id,
                    bonus_applied: bonusAmount > 0,
                    bonus_amount: bonusAmount,
                    bonus_percent: promoResult ? promoResult.bonusPercent : 0,
                    final_amount: finalAmount,
                    promo_code: appliedPromoCode
                });
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:`, invoice);
                res.status(500).json({ error: 'Failed to create invoice' });
            }
        } catch (error) {
            console.error('Create invoice error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    router.post('/check-invoice', async (req, res) => {
        const { invoiceId, demoMode } = req.body;

        try {
            const invoice = await cryptoPayRequest('getInvoices', {
                invoice_ids: invoiceId
            }, demoMode);

            if (invoice.ok && invoice.result.items.length > 0) {
                const invoiceData = invoice.result.items[0];
                
                if (invoiceData.status === 'paid') {
                    const transaction = await findTransactionByInvoiceId(invoiceId);
                    
                    if (transaction && transaction.status === 'pending') {
                        const user = await findUserByTelegramId(transaction.user_id);
                        const depositAmount = transaction.amount || 0;
                        
                        if (demoMode) {
                            await updateUserBalance(user.telegram_id, user.main_balance, user.demo_balance + depositAmount, user.total_deposits + depositAmount);
                        } else {
                            await updateUserBalance(user.telegram_id, user.main_balance + depositAmount, user.demo_balance, user.total_deposits + depositAmount);
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        await updateTransactionStatus(transaction.id, 'completed');

                        // üî• –û–ë–ù–û–í–õ–Ø–ï–ú RTP –°–¢–ê–¢–ò–°–¢–ò–ö–£
                        if (!demoMode) {
                            updateRTPStats('realBank', depositAmount, 0);
                        }

                        // üî• –ò–ù–ö–†–ï–ú–ï–ù–¢ –ü–†–û–ú–û–ö–û–î–ê –¢–û–õ–¨–ö–û –ü–†–ò –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–ï
                        if (!demoMode && transaction.promo_code) {
                            await updatePromoCodeUsedCount(transaction.promo_code);
                            console.log(`üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ ${transaction.promo_code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!`);
                        }

                        res.json({ 
                            success: true, 
                            status: 'paid',
                            amount: depositAmount,
                            bonus_amount: transaction.bonus_amount || 0,
                            promo_code: transaction.promo_code
                        });
                    } else {
                        res.json({ success: false, status: 'not_found' });
                    }
                } else {
                    res.json({ success: true, status: invoiceData.status });
                }
            } else {
                res.json({ success: false, status: 'not_found' });
            }
        } catch (error) {
            console.error('Check invoice error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    router.post('/create-withdrawal', async (req, res) => {
        const { telegramId, amount, address, demoMode } = req.body;

        try {
            const user = await findUserByTelegramId(parseInt(telegramId));
            
            if (!user) {
                return res.status(404).json({ error: 'User not found' });
            }

            const balance = demoMode ? user.demo_balance : user.main_balance;
            
            if (balance < amount) {
                return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—ã–≥—Ä—ã—à–∞ x3
            const totalDeposits = user.total_deposits || 0;
            const requiredWager = totalDeposits * 3;
            
            const userTransactions = await getUserTransactions(user.id);
            const totalWager = userTransactions
                .filter(t => t.type === 'bet' && !t.demo_mode)
                .reduce((sum, t) => sum + (t.amount || 0), 0);

            if (!demoMode && totalWager < requiredWager) {
                const remaining = requiredWager - totalWager;
                return res.status(400).json({ 
                    error: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –µ—â–µ ${remaining.toFixed(2)} TON –¥–ª—è –≤—ã–≤–æ–¥–∞` 
                });
            }

            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
            const transaction = await createTransaction({
                user_id: user.id,
                amount: -amount,
                type: 'withdrawal',
                status: 'pending',
                demo_mode: demoMode,
                details: { address }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (demoMode) {
                await updateUserBalance(user.telegram_id, user.main_balance, user.demo_balance - amount);
            } else {
                await updateUserBalance(user.telegram_id, user.main_balance - amount, user.demo_balance);
            }

            res.json({ 
                success: true, 
                transaction_id: transaction.id,
                new_balance: demoMode ? user.demo_balance - amount : user.main_balance - amount
            });
        } catch (error) {
            console.error('Create withdrawal error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.get('/balance/:telegramId', async (req, res) => {
        const telegramId = parseInt(req.params.telegramId);

        try {
            let user = await findUserByTelegramId(telegramId);
            
            if (!user) {
                user = await createUser(telegramId);
            }

            const realBank = await getCasinoBank();
            const demoBank = await getCasinoDemoBank();

            res.json({
                success: true,
                main_balance: user.main_balance || 0,
                demo_balance: user.demo_balance || 0,
                total_deposits: user.total_deposits || 0,
                demo_mode: user.demo_mode || false,
                is_admin: user.is_admin || false,
                casino_bank: realBank ? realBank.total_balance : 0,
                casino_demo_bank: demoBank ? demoBank.total_balance : 0
            });
        } catch (error) {
            console.error('Get balance error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º
    router.post('/toggle-demo', async (req, res) => {
        const { telegramId } = req.body;

        try {
            const demoMode = await toggleDemoMode(parseInt(telegramId));
            res.json({ success: true, demo_mode: demoMode });
        } catch (error) {
            console.error('Toggle demo error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    router.get('/transactions/:telegramId', async (req, res) => {
        const telegramId = parseInt(req.params.telegramId);
        const limit = parseInt(req.query.limit) || 50;

        try {
            const user = await findUserByTelegramId(telegramId);
            
            if (!user) {
                return res.json({ success: true, transactions: [] });
            }

            const transactions = await getUserTransactions(user.id, limit);
            res.json({ success: true, transactions });
        } catch (error) {
            console.error('Get transactions error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    router.post('/check-promo', async (req, res) => {
        const { telegramId, promoCode, depositAmount } = req.body;

        try {
            const result = await calculatePromoCode(telegramId, promoCode, depositAmount);
            res.json(result);
        } catch (error) {
            console.error('Check promo error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    return router;
};
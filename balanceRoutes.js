const express = require('express');
const router = express.Router();

module.exports = function(db, users, transactions, cryptoPayRequest, updateCasinoBank, updateCasinoDemoBank, updateRTPStats) {

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function applyPromoCode(telegramId, promoCode, depositAmount) {
    console.log(`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
    
    const promo = db.getCollection('promo_codes').findOne({ 
        code: promoCode.toUpperCase(),
        is_active: true 
    });
    
    if (!promo) {
        console.log(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
        return { success: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: ${promo.code}, –±–æ–Ω—É—Å: ${promo.bonus_percent}%, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.used_count}/${promo.max_uses || '–±–µ–∑–ª–∏–º–∏—Ç'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if (promo.max_uses && promo.used_count >= promo.max_uses) {
        console.log(`‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω: ${promo.used_count}/${promo.max_uses}`);
        return { success: false, error: '–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω' };
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = users.findOne({ telegram_id: parseInt(telegramId) });
    if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥
    const userUsedPromo = transactions.findOne({
        user_id: user.$loki,
        promo_code: promo.code,
        status: 'completed'
    });

    if (userUsedPromo) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${promo.code}`);
        return { success: false, error: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥' };
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const bonusAmount = depositAmount * (promo.bonus_percent / 100);
    const totalAmount = depositAmount + bonusAmount;
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    const updatedUsedCount = (promo.used_count || 0) + 1;
    db.getCollection('promo_codes').update({
        ...promo,
        used_count: updatedUsedCount
    });

    console.log(`üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${promo.code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`);
    console.log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç: ${depositAmount.toFixed(2)} TON`);
    console.log(`   üéÅ –ë–æ–Ω—É—Å: +${bonusAmount.toFixed(2)} TON (${promo.bonus_percent}%)`);
    console.log(`   üíé –ò—Ç–æ–≥–æ: ${totalAmount.toFixed(2)} TON`);
    console.log(`   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${updatedUsedCount}/${promo.max_uses || '–±–µ–∑–ª–∏–º–∏—Ç'}`);
    
    return {
        success: true,
        bonusAmount: bonusAmount,
        bonusPercent: promo.bonus_percent,
        totalAmount: totalAmount,
        promo: {
            code: promo.code,
            bonus_percent: promo.bonus_percent,
            description: promo.description,
            used_count: updatedUsedCount, // üî• –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_uses: promo.max_uses,
            is_public: promo.is_public
        }
    };
}

    // API: –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
    router.post('/create-invoice', async (req, res) => {
    const { telegramId, amount, demoMode, promoCode } = req.body;

    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId}, —Å—É–º–º–∞ ${amount}, –¥–µ–º–æ: ${demoMode}, –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode}`);

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç 0.3 TON –≤–º–µ—Å—Ç–æ 3 TON
        if (amount < 0.3) {
            return res.status(400).json({ error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 0.3 TON' });
        }

        let finalAmount = parseFloat(amount);
        let bonusAmount = 0;
        let appliedPromoCode = null;
        let promoResult = null;

        // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if (promoCode && !demoMode) {
            console.log(`üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode}`);
            promoResult = applyPromoCode(telegramId, promoCode, amount);
            if (promoResult.success) {
                finalAmount = promoResult.totalAmount;
                bonusAmount = promoResult.bonusAmount;
                appliedPromoCode = promoCode.toUpperCase();
                console.log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω: +${bonusAmount.toFixed(2)} TON (${promoResult.bonusPercent}%)`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoResult.error}`);
                return res.status(400).json({ error: promoResult.error });
            }
        } else if (promoCode && demoMode) {
            console.log(`‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ`);
        }

        const invoice = await cryptoPayRequest('createInvoice', {
            asset: 'TON',
            amount: amount.toString(), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –≤ Crypto Pay
            description: `Deposit for user ${telegramId}`,
            hidden_message: `Deposit ${amount} TON${bonusAmount > 0 ? ` + ${bonusAmount.toFixed(2)} TON bonus (${appliedPromoCode})` : ''}`,
            payload: JSON.stringify({
                telegram_id: telegramId,
                demo_mode: demoMode,
                amount: amount,
                final_amount: finalAmount, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å –±–æ–Ω—É—Å–æ–º
                bonus_amount: bonusAmount,
                promo_code: appliedPromoCode
            }),
            paid_btn_name: 'callback',
            paid_btn_url: 'https://t.me/your_bot',
            allow_comments: false
        }, demoMode);

        if (invoice.ok && invoice.result) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–∂–∏–¥–∞—é—â—É—é
            transactions.insert({
                user_id: user.$loki,
                amount: finalAmount, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å –±–æ–Ω—É—Å–æ–º
                original_amount: parseFloat(amount), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
                bonus_amount: bonusAmount,
                type: 'deposit',
                status: 'pending',
                invoice_id: invoice.result.invoice_id,
                demo_mode: demoMode,
                promo_code: appliedPromoCode,
                created_at: new Date()
            });

            console.log(`‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: ${invoice.result.invoice_id}`);
            
            res.json({
                success: true,
                invoice_url: invoice.result.pay_url,
                invoice_id: invoice.result.invoice_id,
                bonus_applied: bonusAmount > 0,
                bonus_amount: bonusAmount,
                bonus_percent: promoResult ? promoResult.bonusPercent : 0,
                final_amount: finalAmount,
                promo_code: appliedPromoCode
            });
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:`, invoice);
            res.status(500).json({ error: 'Failed to create invoice' });
        }
    } catch (error) {
        console.error('Create invoice error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

    // API: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    router.post('/check-invoice', async (req, res) => {
        const { invoiceId, demoMode } = req.body;

        try {
            const invoice = await cryptoPayRequest('getInvoices', {
                invoice_ids: invoiceId
            }, demoMode);

            if (invoice.ok && invoice.result.items.length > 0) {
                const invoiceData = invoice.result.items[0];
                
                if (invoiceData.status === 'paid') {
                    // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    const transaction = transactions.findOne({ invoice_id: invoiceId });
                    
                    if (transaction && transaction.status === 'pending') {
                        const user = users.get(transaction.user_id);
                        
                        // üî• –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º final_amount –≤–º–µ—Å—Ç–æ amount
                        const depositAmount = transaction.final_amount || transaction.amount;
                        
                        if (demoMode) {
                            users.update({
                                ...user,
                                demo_balance: user.demo_balance + depositAmount,
                                total_deposits: (user.total_deposits || 0) + depositAmount
                            });
                        } else {
                            users.update({
                                ...user,
                                main_balance: user.main_balance + depositAmount,
                                total_deposits: (user.total_deposits || 0) + depositAmount
                            });
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        transactions.update({
                            ...transaction,
                            status: 'completed',
                            updated_at: new Date()
                        });

                        // üî• –û–ë–ù–û–í–õ–Ø–ï–ú RTP –°–¢–ê–¢–ò–°–¢–ò–ö–£
                        if (!demoMode) {
                            updateRTPStats('realBank', depositAmount, 0);
                        }

                        res.json({ 
                            success: true, 
                            status: 'paid',
                            amount: depositAmount,
                            bonus_amount: transaction.bonus_amount || 0,
                            promo_code: transaction.promo_code
                        });
                    } else {
                        res.json({ success: false, status: 'not_found' });
                    }
                } else {
                    res.json({ success: true, status: invoiceData.status });
                }
            } else {
                res.json({ success: false, status: 'not_found' });
            }
        } catch (error) {
            console.error('Check invoice error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    router.post('/create-withdrawal', async (req, res) => {
        const { telegramId, amount, address, demoMode } = req.body;

        try {
            const user = users.findOne({ telegram_id: parseInt(telegramId) });
            
            if (!user) {
                return res.status(404).json({ error: 'User not found' });
            }

            const balance = demoMode ? user.demo_balance : user.main_balance;
            
            if (balance < amount) {
                return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
            }

            // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û—Ç—ã–≥—Ä—ã—à x3 –æ—Ç –æ–±—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            const totalDeposits = user.total_deposits || 0;
            const requiredWager = totalDeposits * 3;
            
            // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userTransactions = transactions.find({ 
                user_id: user.$loki, 
                demo_mode: demoMode,
                status: 'completed'
            });
            
            const totalWagered = userTransactions
                .filter(t => t.type.includes('loss') || t.type.includes('bet'))
                .reduce((sum, t) => sum + Math.abs(t.amount), 0);

            if (totalWagered < requiredWager) {
                const remaining = requiredWager - totalWagered;
                return res.status(400).json({ 
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç—ã–≥—Ä—ã—à–∞',
                    wagered: totalWagered,
                    required: requiredWager,
                    remaining: remaining,
                    message: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –µ—â–µ ${remaining.toFixed(2)} TON (x3 –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤)`
                });
            }

            if (demoMode) {
                // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                users.update({
                    ...user,
                    demo_balance: user.demo_balance - amount
                });

                transactions.insert({
                    user_id: user.$loki,
                    amount: -amount,
                    type: 'withdrawal',
                    status: 'completed',
                    demo_mode: true,
                    address: address,
                    created_at: new Date()
                });

                res.json({
                    success: true,
                    message: 'Withdrawal completed (demo mode)',
                    new_balance: user.demo_balance - amount
                });
            } else {
                // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–µ–º –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Pay
                const transfer = await cryptoPayRequest('transfer', {
                    user_id: telegramId,
                    asset: 'TON',
                    amount: amount.toString(),
                    spend_id: `withdrawal_${Date.now()}_${telegramId}`
                }, false);

                if (transfer.ok && transfer.result) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
                    users.update({
                        ...user,
                        main_balance: user.main_balance - amount
                    });
                    
                    updateCasinoBank(-amount);

                    transactions.insert({
                        user_id: user.$loki,
                        amount: -amount,
                        type: 'withdrawal',
                        status: 'completed',
                        demo_mode: false,
                        address: address,
                        hash: transfer.result.hash,
                        created_at: new Date()
                    });

                    res.json({
                        success: true,
                        message: 'Withdrawal completed',
                        hash: transfer.result.hash,
                        new_balance: user.main_balance - amount
                    });
                } else {
                    res.status(500).json({ error: 'Withdrawal failed' });
                }
            }
        } catch (error) {
            console.error('Create withdrawal error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.get('/transactions/:telegramId', async (req, res) => {
        const telegramId = parseInt(req.params.telegramId);

        try {
            const user = users.findOne({ telegram_id: telegramId });
            
            if (!user) {
                return res.status(404).json({ error: 'User not found' });
            }

            const userTransactions = transactions.find({ user_id: user.$loki })
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(0, 50);

            res.json(userTransactions);
        } catch (error) {
            console.error('Get transactions error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.get('/user/balance/:telegramId', async (req, res) => {
        const telegramId = parseInt(req.params.telegramId);
        // –¢–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º
        const isAdminUser = telegramId === 842428912 || telegramId === 1135073023;

        try {
            const user = users.findOne({ telegram_id: telegramId });
            
            if (!user) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                const newUser = users.insert({
                    telegram_id: telegramId,
                    main_balance: 0,
                    demo_balance: isAdminUser ? 50 : 0, // 50 TON –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≤–º–µ—Å—Ç–æ 1000
                    total_deposits: 0, // –ù–æ–≤–æ–µ –ø–æ–ª–µ
                    created_at: new Date(),
                    demo_mode: false,
                    is_admin: telegramId === parseInt(process.env.OWNER_TELEGRAM_ID) || telegramId === 1135073023
                });
                
                res.json({
                    main_balance: newUser.main_balance,
                    demo_balance: newUser.demo_balance,
                    demo_mode: newUser.demo_mode,
                    is_admin: newUser.is_admin,
                    total_deposits: newUser.total_deposits
                });
            } else {
                res.json({
                    main_balance: user.main_balance,
                    demo_balance: user.demo_balance,
                    demo_mode: user.demo_mode,
                    is_admin: user.is_admin,
                    total_deposits: user.total_deposits || 0
                });
            }
        } catch (error) {
            console.error('Get balance error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // API: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    router.post('/user/toggle-demo-mode', async (req, res) => {
        const { telegramId } = req.body;

        try {
            const user = users.findOne({ telegram_id: parseInt(telegramId) });
            
            if (!user) {
                return res.status(404).json({ error: 'User not found' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–∞ ID –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º)
            if (parseInt(telegramId) !== 842428912 && parseInt(telegramId) !== 1135073023) {
                return res.status(403).json({ error: 'Demo mode not available' });
            }

            users.update({
                ...user,
                demo_mode: !user.demo_mode
            });

            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –¥–µ–º–æ —Ä–µ–∂–∏–º: ${!user.demo_mode}`);

            res.json({
                success: true,
                demo_mode: !user.demo_mode
            });
        } catch (error) {
            console.error('Toggle demo mode error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    return router;
};
require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');
const cors = require('cors');
const bodyParser = require('body-parser');
const cron = require('node-cron');
const Loki = require('lokijs');
const WebSocket = require('ws');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('.'));

// –î–ª—è Render —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
const dbPath = process.env.NODE_ENV === 'production' ? 
    path.join('/tmp', 'ton-casino.db') : 
    'ton-casino.db';

// LokiJS –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
let db;
let users, transactions, casinoBank, adminLogs, minesGames, rocketGames, rocketBets;

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∫–µ—Ç–∫–∏
const server = app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

const wss = new WebSocket.Server({ server });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã –†–∞–∫–µ—Ç–∫–∞
let rocketGame = {
  status: 'waiting', // waiting, counting, flying, crashed
  multiplier: 1.00,
  startTime: null,
  crashPoint: null,
  players: [],
  history: []
};

// RTP —Å–∏—Å—Ç–µ–º–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
let rtpSystem = {
  realBank: {
    dailyDeposits: 0,      // –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –¥–µ–Ω—å
    dailyPayouts: 0,       // –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
    currentRTP: 0,         // –¢–µ–∫—É—â–∏–π RTP –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    targetRTP: 50,         // –¶–µ–ª–µ–≤–æ–π RTP 50%
    lastResetDate: new Date().toDateString()
  },
  demoBank: {
    dailyDeposits: 0,
    dailyPayouts: 0,
    currentRTP: 0,
    targetRTP: 50,         // –¶–µ–ª–µ–≤–æ–π RTP 50%
    lastResetDate: new Date().toDateString()
  }
};

// –ë–æ—Ç—ã –¥–ª—è —Ä–∞–∫–µ—Ç–∫–∏
const rocketBots = [
  { name: "niwssomi", minBet: 1, maxBet: 10, risk: "medium" },
  { name: "openhgj", minBet: 5, maxBet: 20, risk: "high" },
  { name: "lonis", minBet: 0.5, maxBet: 5, risk: "low" },
  { name: "kartoshka", minBet: 2, maxBet: 8, risk: "medium" },
  { name: "tonmaster", minBet: 3, maxBet: 15, risk: "high" },
  { name: "cryptoking", minBet: 1, maxBet: 12, risk: "medium" },
  { name: "spaceman", minBet: 4, maxBet: 25, risk: "high" },
  { name: "moonrider", minBet: 0.8, maxBet: 6, risk: "low" },
  { name: "stargazer", minBet: 2.5, maxBet: 18, risk: "medium" },
  { name: "cosmicbet", minBet: 6, maxBet: 30, risk: "high" },
  { name: "lucky777", minBet: 1.5, maxBet: 7, risk: "low" },
  { name: "risk_taker", minBet: 8, maxBet: 35, risk: "high" }
];

function getUserDisplayName(userData) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
    const tg = global.Telegram?.WebApp;
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const tgUser = tg.initDataUnsafe.user;
        if (tgUser.username) return tgUser.username;
        if (tgUser.first_name && tgUser.last_name) return `${tgUser.first_name} ${tgUser.last_name}`;
        if (tgUser.first_name) return tgUser.first_name;
        return `User_${tgUser.id}`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ —á—Ç–æ –µ—Å—Ç—å
    if (userData.username) return userData.username;
    if (userData.first_name && userData.last_name) return `${userData.first_name} ${userData.last_name}`;
    if (userData.first_name) return userData.first_name;
    return `User_${userData.telegram_id || userData.id || 'unknown'}`;
}

function initDatabase() {
    return new Promise((resolve) => {
        db = new Loki(dbPath, {
            autoload: true,
            autoloadCallback: () => {
                users = db.getCollection('users');
                transactions = db.getCollection('transactions');
                casinoBank = db.getCollection('casino_bank');
                casinoDemoBank = db.getCollection('casino_demo_bank'); // –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
                adminLogs = db.getCollection('admin_logs');
                minesGames = db.getCollection('mines_games');
                rocketGames = db.getCollection('rocket_games');
                rocketBets = db.getCollection('rocket_bets');

                if (!users) {
                    users = db.addCollection('users', { 
                        unique: ['telegram_id'],
                        indices: ['telegram_id']
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    users.insert({
                        telegram_id: parseInt(process.env.OWNER_TELEGRAM_ID) || 842428912,
                        main_balance: 0,
                        demo_balance: 50, // 50 TON –≤–º–µ—Å—Ç–æ 1000
                        total_deposits: 0, // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
                        created_at: new Date(),
                        demo_mode: false,
                        is_admin: true
                    });
                }
                
                if (!transactions) {
                    transactions = db.addCollection('transactions', {
                        indices: ['user_id', 'created_at', 'demo_mode']
                    });
                }

                if (!casinoBank) {
                    casinoBank = db.addCollection('casino_bank');
                    casinoBank.insert({
                        total_balance: 0,
                        owner_telegram_id: process.env.OWNER_TELEGRAM_ID || 842428912,
                        created_at: new Date(),
                        updated_at: new Date()
                    });
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
                if (!casinoDemoBank) {
                    casinoDemoBank = db.addCollection('casino_demo_bank');
                    casinoDemoBank.insert({
                        total_balance: 500, // 500 TON –¥–µ–º–æ-–±–∞–Ω–∫ –≤–º–µ—Å—Ç–æ 10000
                        owner_telegram_id: process.env.OWNER_TELEGRAM_ID || 842428912,
                        created_at: new Date(),
                        updated_at: new Date()
                    });
                }

                if (!adminLogs) {
                    adminLogs = db.addCollection('admin_logs', {
                        indices: ['created_at']
                    });
                }

                if (!minesGames) {
                    minesGames = db.addCollection('mines_games', {
                        indices: ['user_id', 'created_at', 'demo_mode']
                    });
                }

                if (!rocketGames) {
                    rocketGames = db.addCollection('rocket_games', {
                        indices: ['created_at', 'crashed_at']
                    });
                }

                if (!rocketBets) {
                    rocketBets = db.addCollection('rocket_bets', {
                        indices: ['game_id', 'user_id', 'created_at']
                    });
                }
                
                console.log('LokiJS database initialized');
                resolve(true);
            },
            autosave: true,
            autosaveInterval: 4000
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Pay API
async function cryptoPayRequest(method, data = {}, demoMode = false) {
  try {
    const cryptoPayApi = demoMode ? 
      'https://testnet-pay.crypt.bot/api' : 
      'https://pay.crypt.bot/api';
      
    const cryptoPayToken = demoMode ?
      process.env.CRYPTO_PAY_TESTNET_TOKEN :
      process.env.CRYPTO_PAY_MAINNET_TOKEN;

    const response = await axios.post(`${cryptoPayApi}/${method}`, data, {
      headers: {
        'Crypto-Pay-API-Token': cryptoPayToken,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    return response.data;
  } catch (error) {
    console.error('Crypto Pay API error:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
function logAdminAction(action, telegramId, details = {}) {
  adminLogs.insert({
    action: action,
    telegram_id: telegramId,
    details: details,
    created_at: new Date()
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
function getCasinoBank() {
    return casinoBank.findOne({});
}

function getCasinoDemoBank() {
    return casinoDemoBank.findOne({});
}

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
function updateCasinoBank(amount) {
    const bank = getCasinoBank();
    casinoBank.update({
        ...bank,
        total_balance: bank.total_balance + amount,
        updated_at: new Date()
    });
}

function updateCasinoDemoBank(amount) {
    const bank = getCasinoDemoBank();
    casinoDemoBank.update({
        ...bank,
        total_balance: bank.total_balance + amount,
        updated_at: new Date()
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º Crypto Bot
async function syncCasinoBalance() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å Crypto Bot...');
        
        const response = await axios.get('https://pay.crypt.bot/api/getBalance', {
            headers: {
                'Crypto-Pay-API-Token': process.env.CRYPTO_PAY_MAINNET_TOKEN,
                'Content-Type': 'application/json'
            }
        });

        if (response.data.ok) {
            const tonBalance = response.data.result.find(asset => asset.currency_code === 'TON');
            if (tonBalance) {
                const realBalance = parseFloat(tonBalance.available);
                const currentBank = getCasinoBank();
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.log(`üí∞ Crypto Bot –±–∞–ª–∞–Ω—Å: ${realBalance} TON`);
                console.log(`üè¶ –ù–∞—à –±–∞–Ω–∫: ${currentBank.total_balance} TON`);
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.01 TON
                if (Math.abs(currentBank.total_balance - realBalance) > 0.01) {
                    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${currentBank.total_balance} ‚Üí ${realBalance} TON`);
                    
                    casinoBank.update({
                        ...currentBank,
                        total_balance: realBalance,
                        updated_at: new Date()
                    });
                    
                    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } else {
                    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
            }
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ Crypto Bot API:', response.data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    }
}

// Mines Game Functions
function generateMinesGame(minesCount) {
  const totalCells = 25;
  const mines = [];
  
  while (mines.length < minesCount) {
    const randomCell = Math.floor(Math.random() * totalCells);
    if (!mines.includes(randomCell)) {
      mines.push(randomCell);
    }
  }
  
  return {
    mines,
    minesCount,
    revealedCells: [],
    gameOver: false,
    win: false,
    currentMultiplier: 1,
    betAmount: 0
  };
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–ù–û–ñ–ò–¢–ï–õ–ï–ô –ö–ê–ö –í 1WIN
function calculateMultiplier(openedCells, displayedMines) {
  const multipliers = {
    3: [1.00, 1.07, 1.14, 1.23, 1.33, 1.45, 1.59, 1.75, 1.95, 2.18, 2.47, 2.83, 3.28, 3.86, 4.62, 5.63, 7.00, 8.92, 11.67, 15.83, 22.50, 34.00, 56.67, 113.33],
    5: [1.00, 1.11, 1.22, 1.35, 1.50, 1.67, 1.88, 2.14, 2.45, 2.86, 3.38, 4.05, 4.95, 6.15, 7.83, 10.21, 13.68, 18.91, 27.14, 40.71, 65.14, 113.99, 227.98, 569.95],
    7: [1.00, 1.20, 1.40, 1.64, 1.92, 2.26, 2.67, 3.17, 3.80, 4.60, 5.63, 6.98, 8.75, 11.11, 14.29, 18.75, 25.00, 34.00, 47.50, 68.00, 100.00, 152.00, 240.00, 400.00]
  };

  const mineMultipliers = multipliers[displayedMines];
  
  if (mineMultipliers && openedCells < mineMultipliers.length) {
    return mineMultipliers[openedCells];
  }
  
  return mineMultipliers ? mineMultipliers[mineMultipliers.length - 1] * 2 : 1.00;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ RTP (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
function resetDailyRTP() {
    const today = new Date().toDateString();
    
    if (rtpSystem.realBank.lastResetDate !== today) {
        rtpSystem.realBank = {
            dailyDeposits: 0,
            dailyPayouts: 0,
            currentRTP: 0,
            targetRTP: 50,  // –°–Ω–∏–∂–µ–Ω–æ –¥–æ 50%
            lastResetDate: today
        };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–±—Ä–æ—Å–µ
        lastResults = [];
        psychologySystem = {
            lastHighWins: 0,    
            lastLowWins: 0,     
            randomSeed: Math.random() * 1000,
            heatupPhase: false,  
            trapMode: false,     
            consecutiveSmallWins: 0, 
            lastBigBetResult: null   
        };
        
        console.log('–°–±—Ä–æ—à–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RTP –∏ —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
    }
    
    if (rtpSystem.demoBank.lastResetDate !== today) {
        rtpSystem.demoBank = {
            dailyDeposits: 0,
            dailyPayouts: 0,
            currentRTP: 0,
            targetRTP: 50,  // –°–Ω–∏–∂–µ–Ω–æ –¥–æ 50%
            lastResetDate: today
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ RTP
function calculateCurrentRTP(bankType) {
    const bank = rtpSystem[bankType];
    if (bank.dailyDeposits === 0) return 0;
    return (bank.dailyPayouts / bank.dailyDeposits) * 100;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateRTPStats(bankType, deposit, payout) {
    resetDailyRTP(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    const bank = rtpSystem[bankType];
    bank.dailyDeposits += deposit;
    bank.dailyPayouts += payout;
    bank.currentRTP = calculateCurrentRTP(bankType);
    
    console.log(`${bankType} RTP: ${bank.currentRTP.toFixed(2)}% (–î–µ–ø–æ–∑–∏—Ç—ã: ${bank.dailyDeposits}, –í—ã–ø–ª–∞—Ç—ã: ${bank.dailyPayouts})`);
}

// –ü–†–û–°–¢–û–ô –†–ê–ù–î–û–ú–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú —Å RTP 50%
let gameStats = {
    totalBets: 0,
    totalPayouts: 0,
    gamesCount: 0,
    randomSeed: Math.random() * 10000
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
function getRandomFloat() {
    gameStats.randomSeed = (gameStats.randomSeed * 9301 + 49297) % 233280;
    return (gameStats.randomSeed / 233280 + Math.random()) / 2;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
function shouldWin(betAmount) {
    const random = Math.random() * 100;
    const currentRTP = gameStats.totalBets > 0 ? (gameStats.totalPayouts / gameStats.totalBets) * 100 : 0;
    
    // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ RTP
    let winChance = 45; // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å 45%
    
    // –ï—Å–ª–∏ RTP –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ - –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å
    if (currentRTP < 45) {
        winChance += Math.min(8, (45 - currentRTP) * 1.5);
    }
    // –ï—Å–ª–∏ RTP –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ - —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å
    else if (currentRTP > 55) {
        winChance -= Math.min(12, (currentRTP - 55) * 1.5);
    }
    
    return random < winChance;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞
function generateRandomRealBankCrashPoint(totalBet, bankBalance) {
    // –ï—Å–ª–∏ –±–∞–Ω–∫ –º–µ–Ω—å—à–µ 5 TON - —Å–ª–∏–≤—ã, RTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (bankBalance < 5) {
        if (Math.random() < 0.85) {
            return Math.random() * 0.15 + 1.0; // 85% —Å–ª–∏–≤ 1.0-1.15x
        }
        return Math.random() * 0.4 + 1.15; // 15% –º–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à 1.15-1.55x
    }
    
    // RTP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ 5+ TON - —Å–ª–æ–∂–Ω—ã–π –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    const shouldPlayerWin = shouldWin(totalBet);
    const random = getRandomFloat() * 100;
    
    // –®–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à–æ–π –∏–∫—Å (–¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ –ø—Ä–æ—Å—å–±–µ)
    const bigWinChance = Math.random() * 100;
    if (bigWinChance < 3) { // 3% —à–∞–Ω—Å –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
        return Math.random() * 50.0 + 20.0; // 20x-70x –±–æ–ª—å—à–∏–µ –∏–∫—Å—ã!
    }
    
    // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
    const extraRandom = Math.random() * Math.sin(Date.now() / 1000) * 50;
    const adjustedRandom = random + extraRandom;
    
    if (shouldPlayerWin) {
        // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç - –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        if (adjustedRandom < 25) return Math.random() * 0.9 + 1.1; // 1.1-2.0x
        if (adjustedRandom < 50) return Math.random() * 2.0 + 2.0; // 2.0-4.0x  
        if (adjustedRandom < 75) return Math.random() * 4.0 + 4.0; // 4.0-8.0x
        if (adjustedRandom < 92) return Math.random() * 8.0 + 8.0; // 8.0-16.0x
        return Math.random() * 15.0 + 15.0; // 15.0-30.0x –∫—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
    } else {
        // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç - –Ω–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        const lossRandom = Math.random() * Math.cos(Date.now() / 2000) * 30;
        if (lossRandom + random < 65) return Math.random() * 0.12 + 1.0; // 1.0-1.12x
        if (lossRandom + random < 85) return Math.random() * 0.25 + 1.12; // 1.12-1.37x
        return Math.random() * 0.4 + 1.37; // 1.37-1.77x
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ –±–∞–Ω–∫–∞
function generateRandomDemoBankCrashPoint(totalBet) {
    const shouldPlayerWin = shouldWin(totalBet);
    const random = getRandomFloat() * 100;
    
    if (shouldPlayerWin) {
        // –î–µ–º–æ –±–∞–Ω–∫ —á—É—Ç—å —â–µ–¥—Ä–µ–µ - –Ω–æ –Ω–µ –Ω–∞–º–Ω–æ–≥–æ
        if (random < 25) return Math.random() * 0.8 + 1.2; // 1.2-2.0x
        if (random < 55) return Math.random() * 1.5 + 2.0; // 2.0-3.5x
        if (random < 80) return Math.random() * 3.0 + 3.5; // 3.5-6.5x
        return Math.random() * 12.0 + 6.5; // 6.5-18.5x
    } else {
        // –ü—Ä–æ–∏–≥—Ä—ã—à–∏ —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–∞–Ω–∫–µ
        if (random < 65) return Math.random() * 0.15 + 1.0; // 1.0-1.15x
        if (random < 85) return Math.random() * 0.25 + 1.15; // 1.15-1.4x
        return Math.random() * 0.4 + 1.4; // 1.4-1.8x
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–æ–≤
function generateRandomBotCrashPoint() {
    const random = Math.random() * 100;
    
    if (random < 30) return Math.random() * 0.15 + 1.0; // 1.0-1.15x
    if (random < 60) return Math.random() * 1.0 + 1.5; // 1.5-2.5x
    if (random < 85) return Math.random() * 3.0 + 2.5; // 2.5-5.5x
    return Math.random() * 10.0 + 5.5; // 5.5-15.5x
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞
function generateCrashPoint(players) {
    // –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–∏–ø—ã
    const realPlayers = players.filter(p => !p.isBot && !p.demoMode);
    const demoPlayers = players.filter(p => !p.isBot && p.demoMode);
    
    const totalRealBet = realPlayers.reduce((sum, p) => sum + p.betAmount, 0);
    const totalDemoBet = demoPlayers.reduce((sum, p) => sum + p.betAmount, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    gameStats.totalBets += totalRealBet + totalDemoBet;
    gameStats.gamesCount++;
    
    let crashPoint = 1.00;
    
    if (totalRealBet > 0) {
        // –†–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        const realBank = getCasinoBank();
        crashPoint = generateRandomRealBankCrashPoint(totalRealBet, realBank.total_balance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–ª–∞—Ç
        if (crashPoint > 1.0) {
            const payout = totalRealBet * (crashPoint - 1);
            gameStats.totalPayouts += payout;
        }
        
    } else if (totalDemoBet > 0) {
        // –î–µ–º–æ —Å—Ç–∞–≤–∫–∏
        crashPoint = generateRandomDemoBankCrashPoint(totalDemoBet);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–ª–∞—Ç –¥–ª—è –¥–µ–º–æ
        if (crashPoint > 1.0) {
            const payout = totalDemoBet * (crashPoint - 1);
            gameStats.totalPayouts += payout * 0.5; // –î–µ–º–æ —Å—á–∏—Ç–∞–µ–º —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
        }
        
    } else {
        // –¢–æ–ª—å–∫–æ –±–æ—Ç—ã
        crashPoint = generateRandomBotCrashPoint();
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const currentRTP = gameStats.totalBets > 0 ? (gameStats.totalPayouts / gameStats.totalBets) * 100 : 0;
    console.log(`üé≤ –ö—Ä–∞—à: ${crashPoint.toFixed(2)}x, RTP: ${currentRTP.toFixed(1)}%, –ò–≥—Ä—ã: ${gameStats.gamesCount}`);
    
    return Math.max(1.00, crashPoint);
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –° –ó–ê–©–ò–¢–û–ô –û–¢ –ü–ê–¢–¢–ï–†–ù–û–í

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateMiddleWinCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        return Math.random() * 2.0 + 2.0; // 2.0x - 4.0x —Å—Ä–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ (—É–ª—É—á—à–µ–Ω–æ)
    } else {
        return Math.random() * 3.0 + 2.5; // 2.5x - 5.5x –¥–ª—è –º–∞–ª—ã—Ö —Å—Ç–∞–≤–æ–∫ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ)
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≤—ã–∏–≥—Ä—ã—à–Ω—ã–π) - –ò–°–ü–†–ê–í–õ–ï–ù–û
function generateAntiPatternWinningCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π
    if (shouldAvoidPattern('high')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    const bonusChance = psychologySystem.lastLowWins * 15; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∏
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
    if (totalBet >= 0.7) { // –ë–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏
        if (random < 25 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à 1.0-1.4x
        if (random < 55 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π 1.8-2.3x  
        if (random < 80 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π 4.0-5.2x
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π 5.2-15x
    } else { // –ú–∞–ª—ã–µ —Å—Ç–∞–≤–∫–∏ (0.1-0.6)
        if (random < 15 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π
        if (random < 40 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π
        if (random < 70 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π  
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
function generateAntiPatternBalancedCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
    const winBonus = psychologySystem.lastLowWins * 10;
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –≤—ã–∏–≥—Ä—ã—à–µ–π - —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≤—ã—Å–æ–∫–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    const highWinPenalty = psychologySystem.lastHighWins * 15;
    
    if (totalBet >= 0.7) {
        if (random < 45 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 65 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 80 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π
        if (random < 93 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    } else {
        if (random < 35 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 55 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 75 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π  
        if (random < 92 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û  
function generateAntiPatternLosingCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
    if (shouldAvoidPattern('low')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        if (random < 75) return Math.random() * 0.15 + 1.00; // 75% –ø—Ä–æ–∏–≥—Ä—ã—à (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 80%)
        if (random < 88) return Math.random() * 0.4 + 1.0;   // 13% –º–∞–ª—ã–π
        if (random < 96) return Math.random() * 0.5 + 1.8;   // 8% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 4% –±–æ–ª—å—à–æ–π
    } else {
        if (random < 65) return Math.random() * 0.15 + 1.00; // 65% –ø—Ä–æ–∏–≥—Ä—ã—à (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 70%)
        if (random < 80) return Math.random() * 0.4 + 1.0;   // 15% –º–∞–ª—ã–π
        if (random < 92) return Math.random() * 0.5 + 1.8;   // 12% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 8% –±–æ–ª—å—à–æ–π
    }
}

// Rocket Game Main Functions

function startRocketGame() {
    if (rocketGame.status !== 'waiting') return;

    rocketGame.status = 'counting';
    rocketGame.multiplier = 1.00;
    rocketGame.startTime = Date.now();
    rocketGame.endBetTime = Date.now() + 5000; // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—Ç–∞–≤–∫–∏
    rocketGame.players = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º crashPoint –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç–∞–≤–∫–∏
    setTimeout(() => {
        // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        rocketGame.crashPoint = generateCrashPoint(rocketGame.players);
        console.log(`–ö—Ä–∞—à-–ø–æ–∏–Ω—Ç: ${rocketGame.crashPoint.toFixed(2)}x`);
        
        // –í—ã–≤–æ–¥–∏–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ RTP: ${rtpSystem.realBank.currentRTP.toFixed(2)}%`);
        console.log(`–î–µ–º–æ –±–∞–Ω–∫ RTP: ${rtpSystem.demoBank.currentRTP.toFixed(2)}%`);
    }, 5000);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –±–æ—Ç–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    setTimeout(() => {
        rocketBots.forEach(bot => {
            const betAmount = bot.minBet + Math.random() * (bot.maxBet - bot.minBet);
            const autoCashout = bot.risk === 'low' ? 2 + Math.random() * 3 : 
                               bot.risk === 'medium' ? 5 + Math.random() * 10 : 
                               10 + Math.random() * 30;
            
            rocketGame.players.push({
                name: bot.name,
                betAmount: parseFloat(betAmount.toFixed(2)),
                autoCashout: parseFloat(autoCashout.toFixed(2)),
                isBot: true,
                cashedOut: false,
                winAmount: 0
            });
        });
        broadcastRocketUpdate();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–æ–≤

    // –§–ò–ö–°: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
    rocketGame.timeLeft = 5;
    broadcastRocketUpdate();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const syncInterval = setInterval(() => {
        if (rocketGame.status !== 'counting') {
            clearInterval(syncInterval);
            return;
        }
        
        const timeLeft = Math.max(0, Math.ceil((rocketGame.endBetTime - Date.now()) / 1000));
        rocketGame.timeLeft = timeLeft;
        broadcastRocketUpdate();
        
        if (timeLeft <= 0) {
            clearInterval(syncInterval);
            rocketGame.status = 'flying';
            broadcastRocketUpdate();
            startRocketFlight();
        }
    }, 1000);
}


// server.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è startRocketFlight
function startRocketFlight() {
  const startTime = Date.now();
  let baseSpeed = 0.1;
  let acceleration = 0.05;
  
  const flightInterval = setInterval(() => {
    if (rocketGame.status !== 'flying') {
      clearInterval(flightInterval);
      return;
    }

    const elapsed = (Date.now() - startTime) / 1000;
    rocketGame.multiplier = 1.00 + (elapsed * baseSpeed * Math.exp(elapsed * acceleration));

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ë–û–¢–û–í - –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –í–´–ò–ì–†–´–®–ò
    rocketGame.players.forEach(player => {
      if (player.isBot && !player.cashedOut) {
        // –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç risk-–ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞
        let winChance;
        switch(player.risk) {
          case 'low':
            winChance = 0.6; // 60% —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å
            break;
          case 'medium':
            winChance = 0.5; // 50% —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å
            break;
          case 'high':
            winChance = 0.4; // 40% —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å
            break;
          default:
            winChance = 0.5;
        }

        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞
        if (rocketGame.multiplier >= player.autoCashout) {
          // –ë–æ—Ç –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —Å–≤–æ–µ–º autoCashout
          player.cashedOut = true;
          player.winAmount = player.betAmount * player.autoCashout;
          player.cashoutMultiplier = player.autoCashout;
          
          // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
          console.log(`ü§ñ –ë–æ—Ç ${player.name} –≤—ã–∏–≥—Ä–∞–ª ${player.winAmount.toFixed(2)} TON (${player.autoCashout.toFixed(2)}x)`);
          
        } else if (rocketGame.multiplier > 1.5 && Math.random() < 0.01) {
          // 1% —à–∞–Ω—Å —á—Ç–æ –±–æ—Ç –∏—Å–ø—É–≥–∞–µ—Ç—Å—è –∏ –≤—ã–≤–µ–¥–µ—Ç —Ä–∞–Ω—å—à–µ
          const earlyCashout = rocketGame.multiplier * (0.8 + Math.random() * 0.4);
          player.cashedOut = true;
          player.winAmount = player.betAmount * earlyCashout;
          player.cashoutMultiplier = earlyCashout;
          
          console.log(`ü§ñ –ë–æ—Ç ${player.name} –∏—Å–ø—É–≥–∞–ª—Å—è –∏ –≤—ã–≤–µ–ª ${player.winAmount.toFixed(2)} TON (${earlyCashout.toFixed(2)}x)`);
        }
        
        // –®–∞–Ω—Å —á—Ç–æ –±–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç (–Ω–µ —É—Å–ø–µ–µ—Ç –≤—ã–≤–µ—Å—Ç–∏)
        if (!player.cashedOut && rocketGame.multiplier >= rocketGame.crashPoint * 0.9) {
          // –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –±–ª–∏–∑–æ–∫ –∫ –∫—Ä–∞—à—É, –±–æ—Ç –º–æ–∂–µ—Ç "–Ω–µ —É—Å–ø–µ—Ç—å"
          if (Math.random() < 0.3) {
            player.cashedOut = false; // –ü—Ä–æ–∏–≥—Ä–∞–ª
            console.log(`ü§ñ –ë–æ—Ç ${player.name} –Ω–µ —É—Å–ø–µ–ª –≤—ã–≤–µ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª ${player.betAmount.toFixed(2)} TON`);
          }
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
    if (rocketGame.multiplier >= rocketGame.crashPoint) {
      rocketGame.status = 'crashed';
      clearInterval(flightInterval);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –±–æ—Ç–æ–≤
      rocketGame.players.forEach(player => {
        if (player.isBot && !player.cashedOut) {
          console.log(`ü§ñ –ë–æ—Ç ${player.name} –ø—Ä–æ–∏–≥—Ä–∞–ª ${player.betAmount.toFixed(2)} TON –ø—Ä–∏ –∫—Ä–∞—à–µ ${rocketGame.crashPoint.toFixed(2)}x`);
        }
      });
      
      processRocketGameEnd();
    }

    broadcastRocketUpdate();
  }, 100);
}



function processRocketGameEnd() {
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º
  const botStats = rocketGame.players.filter(p => p.isBot);
  const winningBots = botStats.filter(p => p.cashedOut);
  const losingBots = botStats.filter(p => !p.cashedOut);
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤: ${winningBots.length} –≤—ã–∏–≥—Ä–∞–ª–∏, ${losingBots.length} –ø—Ä–æ–∏–≥—Ä–∞–ª–∏`);
  winningBots.forEach(bot => {
    console.log(`   üéâ ${bot.name}: +${bot.winAmount.toFixed(2)} TON (${bot.cashoutMultiplier.toFixed(2)}x)`);
  });
  losingBots.forEach(bot => {
    console.log(`   üí• ${bot.name}: -${bot.betAmount.toFixed(2)} TON`);
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é
  const gameRecord = rocketGames.insert({
    crashPoint: rocketGame.crashPoint,
    maxMultiplier: rocketGame.multiplier,
    startTime: new Date(rocketGame.startTime),
    endTime: new Date(),
    playerCount: rocketGame.players.filter(p => !p.isBot).length, // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    botCount: rocketGame.players.filter(p => p.isBot).length,
    totalBets: rocketGame.players.reduce((sum, p) => sum + p.betAmount, 0),
    totalPayouts: rocketGame.players.reduce((sum, p) => sum + (p.cashedOut ? p.winAmount : 0), 0),
    botWins: winningBots.length,
    botLosses: losingBots.length
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  rocketGame.players.forEach(player => {
    if (!player.isBot) {
      const user = users.findOne({ telegram_id: parseInt(player.userId) });
      if (user) {
        if (player.cashedOut) {
          // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª - –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à (—É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏ cashout)
          transactions.insert({
            user_id: user.$loki,
            amount: player.winAmount,
            type: 'rocket_win',
            status: 'completed',
            demo_mode: player.demoMode,
            game_id: gameRecord.$loki,
            created_at: new Date()
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
          rocketBets.insert({
            game_id: gameRecord.$loki,
            user_id: user.$loki,
            bet_amount: player.betAmount,
            cashout_multiplier: player.cashoutMultiplier,
            win_amount: player.winAmount,
            demo_mode: player.demoMode,
            created_at: new Date()
          });
        } else {
          // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª - —Å—Ç–∞–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–Ω–∫–µ –∫–∞–∑–∏–Ω–æ (—É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ)
          transactions.insert({
            user_id: user.$loki,
            amount: -player.betAmount,
            type: 'rocket_loss',
            status: 'completed',
            demo_mode: player.demoMode,
            game_id: gameRecord.$loki,
            created_at: new Date()
          });

          rocketBets.insert({
            game_id: gameRecord.$loki,
            user_id: user.$loki,
            bet_amount: player.betAmount,
            cashout_multiplier: null,
            win_amount: 0,
            demo_mode: player.demoMode,
            created_at: new Date()
          });
        }
      }
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
  rocketGame.history.unshift({
    crashPoint: rocketGame.crashPoint,
    multiplier: rocketGame.multiplier,
    botWins: winningBots.length,
    botLosses: losingBots.length
  });

  if (rocketGame.history.length > 50) {
    rocketGame.history.pop();
  }

  broadcastRocketUpdate();

  // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  setTimeout(() => {
    rocketGame.status = 'waiting';
    rocketGame.multiplier = 1.00;
    rocketGame.players = [];
    broadcastRocketUpdate();
    startRocketGame();
  }, 5000);
}



function broadcastRocketUpdate() {
    const data = JSON.stringify({
        type: 'rocket_update',
        game: rocketGame
    });

    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(data);
        }
    });
}
// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
wss.on('connection', function connection(ws) {
  console.log('Rocket game client connected');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  ws.send(JSON.stringify({
    type: 'rocket_update',
    game: rocketGame
  }));

  ws.on('close', () => {
    console.log('Rocket game client disconnected');
  });
});





// API: –ù–∞—á–∞—Ç—å –∏–≥—Ä—É Mines
app.post('/api/mines/start', async (req, res) => {
    const { telegramId, betAmount, minesCount, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        const game = minesGames.insert({
            user_id: user.$loki,
            bet_amount: betAmount,
            mines_count: minesCount,
            revealed_cells: [],
            game_over: false,
            win: false,
            current_multiplier: 1,
            demo_mode: demoMode,
            created_at: new Date()
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
        if (demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance - betAmount
            });
            updateCasinoDemoBank(betAmount); // –°—Ç–∞–≤–∫–∞ –∏–¥–µ—Ç –≤ –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance - betAmount
            });
            updateCasinoBank(betAmount); // –°—Ç–∞–≤–∫–∞ –∏–¥–µ—Ç –≤ –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
        }

        res.json({
            success: true,
            game_id: game.$loki,
            new_balance: demoMode ? user.demo_balance - betAmount : user.main_balance - betAmount
        });
    } catch (error) {
        console.error('Mines start error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É –≤ Mines
app.post('/api/mines/open', async (req, res) => {
    const { gameId, cellIndex, telegramId } = req.body;

    try {
        const game = minesGames.get(gameId);
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!game || !user) {
            return res.status(404).json({ error: 'Game or user not found' });
        }

        if (game.game_over) {
            return res.status(400).json({ error: 'Game already finished' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
        if (!game.mines) {
            const mines = [];
            while (mines.length < game.mines_count) {
                const randomCell = Math.floor(Math.random() * 25);
                if (!mines.includes(randomCell)) {
                    mines.push(randomCell);
                }
            }
            minesGames.update({
                ...game,
                mines: mines
            });
            game.mines = mines;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞
        if (game.mines.includes(cellIndex)) {
            // –ú–∏–Ω–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            minesGames.update({
                ...game,
                game_over: true,
                win: false,
                revealed_cells: [...game.revealed_cells, cellIndex]
            });

            res.json({
                success: true,
                game_over: true,
                mine_hit: true,
                multiplier: 0,
                revealed_cells: [...game.revealed_cells, cellIndex],
                mines: game.mines
            });
        } else {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
            const revealedCells = [...game.revealed_cells, cellIndex];
            const multiplier = calculateMultiplier(revealedCells.length, game.mines_count);

            minesGames.update({
                ...game,
                revealed_cells: revealedCells,
                current_multiplier: multiplier
            });

            res.json({
                success: true,
                game_over: false,
                mine_hit: false,
                multiplier: multiplier,
                revealed_cells: revealedCells
            });
        }
    } catch (error) {
        console.error('Mines open error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ Mines
app.post('/api/mines/cashout', async (req, res) => {
    const { gameId, telegramId } = req.body;

    try {
        const game = minesGames.get(gameId);
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!game || !user) {
            return res.status(404).json({ error: 'Game or user not found' });
        }

        if (game.game_over) {
            return res.status(400).json({ error: 'Game already finished' });
        }

        const winAmount = game.bet_amount * game.current_multiplier;

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        minesGames.update({
            ...game,
            game_over: true,
            win: true,
            win_amount: winAmount
        });

        // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if (game.demo_mode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance + winAmount
            });
            updateCasinoDemoBank(-winAmount); // –í—ã–ø–ª–∞—Ç–∞ –∏–∑ –±–∞–Ω–∫–∞ –∫–∞–∑–∏–Ω–æ
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance + winAmount
            });
            updateCasinoBank(-winAmount); // –í—ã–ø–ª–∞—Ç–∞ –∏–∑ –±–∞–Ω–∫–∞ –∫–∞–∑–∏–Ω–æ
        }

        res.json({
            success: true,
            win_amount: winAmount,
            multiplier: game.current_multiplier,
            new_balance: game.demo_mode ? user.demo_balance + winAmount : user.main_balance + winAmount
        });
    } catch (error) {
        console.error('Mines cashout error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ Rocket
app.post('/api/rocket/bet', async (req, res) => {
    const { telegramId, betAmount, demoMode, username} = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // –ü–†–û–í–ï–†–ö–ê: –£–∂–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingBet = rocketGame.players.find(p => 
           p.userId == telegramId && !p.isBot
        );
        
        if (existingBet) {
            return res.status(400).json({ error: '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ' });
        }

        // –ü–†–û–í–ï–†–ö–ê: –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ
        if (rocketGame.status !== 'counting' || Date.now() > rocketGame.endBetTime) {
            return res.status(400).json({ error: '–í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        if (demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance - betAmount
            });
            updateCasinoDemoBank(betAmount); // –°—Ç–∞–≤–∫–∞ –∏–¥–µ—Ç –≤ –¥–µ–º–æ-–±–∞–Ω–∫
            updateRTPStats('demoBank', betAmount, 0);
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance - betAmount
            });
            updateCasinoBank(betAmount); // –°—Ç–∞–≤–∫–∞ –∏–¥–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
            updateRTPStats('realBank', betAmount, 0);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
       const player = {
            userId: telegramId,
            name: username || getUserDisplayName(user), // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç user
            betAmount: parseFloat(betAmount),
            demoMode: demoMode,
            cashedOut: false,
            cashoutMultiplier: null,
            winAmount: 0,
            isBot: false
        };

        rocketGame.players.push(player);

        broadcastRocketUpdate();

        res.json({
            success: true,
            new_balance: demoMode ? user.demo_balance - betAmount : user.main_balance - betAmount
        });
     } catch (error) {
        console.error('Rocket bet error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ Rocket
app.post('/api/rocket/cashout', async (req, res) => {
    const { telegramId } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        if (rocketGame.status !== 'flying') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à —Å–µ–π—á–∞—Å' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞
        const player = rocketGame.players.find(p => p.userId == telegramId && !p.isBot);
        
        if (!player || player.cashedOut) {
            return res.status(400).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à' });
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        const winAmount = player.betAmount * rocketGame.multiplier;
        
        if (player.demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance + winAmount
            });
            updateCasinoDemoBank(-winAmount); // –í—ã–ø–ª–∞—Ç–∞ –∏–∑ –¥–µ–º–æ-–±–∞–Ω–∫–∞
            updateRTPStats('demoBank', 0, winAmount);
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance + winAmount
            });
            updateCasinoBank(-winAmount); // –í—ã–ø–ª–∞—Ç–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞
            updateRTPStats('realBank', 0, winAmount);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        player.cashedOut = true;
        player.cashoutMultiplier = rocketGame.multiplier;
        player.winAmount = winAmount;

        broadcastRocketUpdate();

        res.json({
            success: true,
            multiplier: rocketGame.multiplier,
            winAmount: winAmount,
            new_balance: player.demoMode ? user.demo_balance + winAmount : user.main_balance + winAmount
        });
    } catch (error) {
        console.error('Rocket cashout error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é Rocket
app.get('/api/rocket/history', async (req, res) => {
    try {
        res.json(rocketGame.history.slice(0, 20));
    } catch (error) {
        console.error('Get rocket history error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É Rocket
app.get('/api/rocket/current', async (req, res) => {
    try {
        res.json(rocketGame);
    } catch (error) {
        console.error('Get current rocket game error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// Coin Game Functions
app.post('/api/coin/flip', async (req, res) => {
    const { telegramId, betAmount, choice, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
        if (!['heads', 'tails'].includes(choice)) {
            return res.status(400).json({ error: 'Invalid choice' });
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        if (demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance - betAmount
            });
            updateCasinoDemoBank(betAmount);
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance - betAmount
            });
            updateCasinoBank(betAmount);
            updateRTPStats('realBank', betAmount, 0);
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (50/50)
        const result = Math.random() < 0.5 ? 'heads' : 'tails';
        const win = result === choice;
        const winAmount = win ? betAmount * 1.95 : 0; // 1.95x –¥–ª—è RTP ~97.5%

        // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª
        if (win) {
            if (demoMode) {
                users.update({
                    ...user,
                    demo_balance: user.demo_balance + winAmount
                });
                updateCasinoDemoBank(-winAmount);
            } else {
                users.update({
                    ...user,
                    main_balance: user.main_balance + winAmount
                });
                updateCasinoBank(-winAmount);
                updateRTPStats('realBank', 0, winAmount);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transactions.insert({
            user_id: user.$loki,
            amount: win ? winAmount : -betAmount,
            type: win ? 'coin_win' : 'coin_loss',
            status: 'completed',
            demo_mode: demoMode,
            details: {
                choice: choice,
                result: result,
                bet_amount: betAmount,
                win_amount: winAmount
            },
            created_at: new Date()
        });

        res.json({
            success: true,
            result: result,
            win: win,
            win_amount: winAmount,
            new_balance: demoMode ? 
                (win ? user.demo_balance + winAmount : user.demo_balance - betAmount) :
                (win ? user.main_balance + winAmount : user.main_balance - betAmount)
        });

    } catch (error) {
        console.error('Coin flip error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await initDatabase();
    const balanceRoutes = require('./balanceRoutes')(db, users, transactions, cryptoPayRequest, updateCasinoBank, updateCasinoDemoBank, updateRTPStats);
    app.use('/api', balanceRoutes);

    const cryptoBotRoutes = require('./cryptoBotRoutes')(db, users, transactions, cryptoPayRequest, updateCasinoBank, updateCasinoDemoBank, updateRTPStats);
    app.use('/api/crypto', cryptoBotRoutes);

    const adminRoutes = require('./adminRoutes')(db, users, transactions, casinoBank, casinoDemoBank, adminLogs, minesGames, rocketGames, rocketBets, cryptoPayRequest, updateCasinoBank, updateCasinoDemoBank, syncCasinoBalance);
    app.use('/api', adminRoutes);
    resetDailyRTP();
    startRocketGame();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
    setTimeout(() => {
        syncCasinoBalance();
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(syncCasinoBalance, 5 * 60 * 1000);
    }, 10000); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    
    console.log(`TON Casino Server started on port ${PORT}`);
    console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)`);
}
// –ö—Ä–æ–Ω –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ RTP –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
cron.schedule('0 0 * * *', () => {
    console.log('–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ RTP...');
    resetDailyRTP();
    console.log('RTP —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å');
});

startServer()
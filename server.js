require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');
const cors = require('cors');
const bodyParser = require('body-parser');
const cron = require('node-cron');
const Loki = require('lokijs');
const WebSocket = require('ws');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('.'));

// –î–ª—è Render —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
const dbPath = process.env.NODE_ENV === 'production' ? 
    path.join('/tmp', 'ton-casino.db') : 
    'ton-casino.db';

// LokiJS –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
let db;
let users, transactions, casinoBank, adminLogs, minesGames, rocketGames, rocketBets;

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∫–µ—Ç–∫–∏
const server = app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

const wss = new WebSocket.Server({ server });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã –†–∞–∫–µ—Ç–∫–∞
let rocketGame = {
  status: 'waiting', // waiting, counting, flying, crashed
  multiplier: 1.00,
  startTime: null,
  crashPoint: null,
  players: [],
  history: []
};

// RTP —Å–∏—Å—Ç–µ–º–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
let rtpSystem = {
  realBank: {
    dailyDeposits: 0,      // –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –¥–µ–Ω—å
    dailyPayouts: 0,       // –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
    currentRTP: 0,         // –¢–µ–∫—É—â–∏–π RTP –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    targetRTP: 60,         // –¶–µ–ª–µ–≤–æ–π RTP 60%
    lastResetDate: new Date().toDateString()
  },
  demoBank: {
    dailyDeposits: 0,
    dailyPayouts: 0,
    currentRTP: 0,
    targetRTP: 60,
    lastResetDate: new Date().toDateString()
  }
};

// –ë–æ—Ç—ã –¥–ª—è —Ä–∞–∫–µ—Ç–∫–∏
const rocketBots = [
  { name: "Bot_1", minBet: 1, maxBet: 10, risk: "medium" },
  { name: "Bot_2", minBet: 5, maxBet: 20, risk: "high" },
  { name: "Bot_3", minBet: 0.5, maxBet: 5, risk: "low" }
];

function initDatabase() {
    return new Promise((resolve) => {
        db = new Loki(dbPath, {
            autoload: true,
            autoloadCallback: () => {
                users = db.getCollection('users');
                transactions = db.getCollection('transactions');
                casinoBank = db.getCollection('casino_bank');
                casinoDemoBank = db.getCollection('casino_demo_bank'); // –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
                adminLogs = db.getCollection('admin_logs');
                minesGames = db.getCollection('mines_games');
                rocketGames = db.getCollection('rocket_games');
                rocketBets = db.getCollection('rocket_bets');

                if (!users) {
                    users = db.addCollection('users', { 
                        unique: ['telegram_id'],
                        indices: ['telegram_id']
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    users.insert({
                        telegram_id: parseInt(process.env.OWNER_TELEGRAM_ID) || 842428912,
                        main_balance: 0,
                        demo_balance: 1000,
                        created_at: new Date(),
                        demo_mode: false,
                        is_admin: true
                    });
                }
                
                if (!transactions) {
                    transactions = db.addCollection('transactions', {
                        indices: ['user_id', 'created_at', 'demo_mode']
                    });
                }

                if (!casinoBank) {
                    casinoBank = db.addCollection('casino_bank');
                    casinoBank.insert({
                        total_balance: 0,
                        owner_telegram_id: process.env.OWNER_TELEGRAM_ID || 842428912,
                        created_at: new Date(),
                        updated_at: new Date()
                    });
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
                if (!casinoDemoBank) {
                    casinoDemoBank = db.addCollection('casino_demo_bank');
                    casinoDemoBank.insert({
                        total_balance: 10000, // 10000 TON –¥–µ–º–æ-–±–∞–Ω–∫
                        owner_telegram_id: process.env.OWNER_TELEGRAM_ID || 842428912,
                        created_at: new Date(),
                        updated_at: new Date()
                    });
                }

                if (!adminLogs) {
                    adminLogs = db.addCollection('admin_logs', {
                        indices: ['created_at']
                    });
                }

                if (!minesGames) {
                    minesGames = db.addCollection('mines_games', {
                        indices: ['user_id', 'created_at', 'demo_mode']
                    });
                }

                if (!rocketGames) {
                    rocketGames = db.addCollection('rocket_games', {
                        indices: ['created_at', 'crashed_at']
                    });
                }

                if (!rocketBets) {
                    rocketBets = db.addCollection('rocket_bets', {
                        indices: ['game_id', 'user_id', 'created_at']
                    });
                }
                
                console.log('LokiJS database initialized');
                resolve(true);
            },
            autosave: true,
            autosaveInterval: 4000
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Pay API
async function cryptoPayRequest(method, data = {}, demoMode = false) {
  try {
    const cryptoPayApi = demoMode ? 
      'https://testnet-pay.crypt.bot/api' : 
      'https://pay.crypt.bot/api';
      
    const cryptoPayToken = demoMode ?
      process.env.CRYPTO_PAY_TESTNET_TOKEN :
      process.env.CRYPTO_PAY_MAINNET_TOKEN;

    const response = await axios.post(`${cryptoPayApi}/${method}`, data, {
      headers: {
        'Crypto-Pay-API-Token': cryptoPayToken,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    return response.data;
  } catch (error) {
    console.error('Crypto Pay API error:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
function logAdminAction(action, telegramId, details = {}) {
  adminLogs.insert({
    action: action,
    telegram_id: telegramId,
    details: details,
    created_at: new Date()
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
function getCasinoBank() {
    return casinoBank.findOne({});
}

function getCasinoDemoBank() {
    return casinoDemoBank.findOne({});
}

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
function updateCasinoBank(amount) {
    const bank = getCasinoBank();
    casinoBank.update({
        ...bank,
        total_balance: bank.total_balance + amount,
        updated_at: new Date()
    });
}

function updateCasinoDemoBank(amount) {
    const bank = getCasinoDemoBank();
    casinoDemoBank.update({
        ...bank,
        total_balance: bank.total_balance + amount,
        updated_at: new Date()
    });
}

// Mines Game Functions
function generateMinesGame(minesCount) {
  const totalCells = 25;
  const mines = [];
  
  while (mines.length < minesCount) {
    const randomCell = Math.floor(Math.random() * totalCells);
    if (!mines.includes(randomCell)) {
      mines.push(randomCell);
    }
  }
  
  return {
    mines,
    minesCount,
    revealedCells: [],
    gameOver: false,
    win: false,
    currentMultiplier: 1,
    betAmount: 0
  };
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–ù–û–ñ–ò–¢–ï–õ–ï–ô –ö–ê–ö –í 1WIN
function calculateMultiplier(openedCells, displayedMines) {
  const multipliers = {
    3: [1.00, 1.07, 1.14, 1.23, 1.33, 1.45, 1.59, 1.75, 1.95, 2.18, 2.47, 2.83, 3.28, 3.86, 4.62, 5.63, 7.00, 8.92, 11.67, 15.83, 22.50, 34.00, 56.67, 113.33],
    5: [1.00, 1.11, 1.22, 1.35, 1.50, 1.67, 1.88, 2.14, 2.45, 2.86, 3.38, 4.05, 4.95, 6.15, 7.83, 10.21, 13.68, 18.91, 27.14, 40.71, 65.14, 113.99, 227.98, 569.95],
    7: [1.00, 1.20, 1.40, 1.64, 1.92, 2.26, 2.67, 3.17, 3.80, 4.60, 5.63, 6.98, 8.75, 11.11, 14.29, 18.75, 25.00, 34.00, 47.50, 68.00, 100.00, 152.00, 240.00, 400.00]
  };

  const mineMultipliers = multipliers[displayedMines];
  
  if (mineMultipliers && openedCells < mineMultipliers.length) {
    return mineMultipliers[openedCells];
  }
  
  return mineMultipliers ? mineMultipliers[mineMultipliers.length - 1] * 2 : 1.00;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ RTP (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
function resetDailyRTP() {
    const today = new Date().toDateString();
    
    if (rtpSystem.realBank.lastResetDate !== today) {
        rtpSystem.realBank = {
            dailyDeposits: 0,
            dailyPayouts: 0,
            currentRTP: 0,
            targetRTP: 60,
            lastResetDate: today
        };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–±—Ä–æ—Å–µ
        lastResults = [];
        antiPatternSystem = {
            lastHighWins: 0,
            lastLowWins: 0,
            randomSeed: Math.random() * 1000
        };
        
        console.log('–°–±—Ä–æ—à–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RTP –∏ —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
    }
    
    if (rtpSystem.demoBank.lastResetDate !== today) {
        rtpSystem.demoBank = {
            dailyDeposits: 0,
            dailyPayouts: 0,
            currentRTP: 0,
            targetRTP: 60,
            lastResetDate: today
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ RTP
function calculateCurrentRTP(bankType) {
    const bank = rtpSystem[bankType];
    if (bank.dailyDeposits === 0) return 0;
    return (bank.dailyPayouts / bank.dailyDeposits) * 100;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateRTPStats(bankType, deposit, payout) {
    resetDailyRTP(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    const bank = rtpSystem[bankType];
    bank.dailyDeposits += deposit;
    bank.dailyPayouts += payout;
    bank.currentRTP = calculateCurrentRTP(bankType);
    
    console.log(`${bankType} RTP: ${bank.currentRTP.toFixed(2)}% (–î–µ–ø–æ–∑–∏—Ç—ã: ${bank.dailyDeposits}, –í—ã–ø–ª–∞—Ç—ã: ${bank.dailyPayouts})`);
}

// –ù–û–í–´–ô –ù–ï–ü–†–ï–î–°–ö–ê–ó–£–ï–ú–´–ô –ê–õ–ì–û–†–ò–¢–ú —Å RTP 60% –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
let lastResults = []; // –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let antiPatternSystem = {
    lastHighWins: 0,    // –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—Å–æ–∫–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π  
    lastLowWins: 0,     // –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
    randomSeed: Math.random() * 1000 // –°–ª—É—á–∞–π–Ω–æ–µ —Å–µ–º—è –¥–ª—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å —É—á–µ—Ç–æ–º —Å–µ–º–µ–Ω–∏
function getSeededRandom() {
    return (antiPatternSystem.randomSeed / 233280 + Math.random()) / 2;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–±–µ–≥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞
function shouldAvoidPattern(type) {
    if (type === 'high' && antiPatternSystem.lastHighWins >= 2) {
        return true; // –ò–∑–±–µ–≥–∞–µ–º —Ç—Ä–µ—Ç–∏–π –ø–æ–¥—Ä—è–¥ –≤—ã—Å–æ–∫–∏–π –≤—ã–∏–≥—Ä—ã—à
    }
    if (type === 'low' && antiPatternSystem.lastLowWins >= 3) {
        return true; // –ò–∑–±–µ–≥–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–æ–¥—Ä—è–¥ –Ω–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
    return false;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function updateAntiPatternSystem(crashPoint) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    lastResults.unshift(crashPoint);
    if (lastResults.length > 10) {
        lastResults.pop(); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (crashPoint >= 4.0) {
        antiPatternSystem.lastHighWins++;
        antiPatternSystem.lastLowWins = 0;
    } else if (crashPoint <= 1.5) {
        antiPatternSystem.lastLowWins++;
        antiPatternSystem.lastHighWins = 0;
    } else {
        antiPatternSystem.lastHighWins = 0;
        antiPatternSystem.lastLowWins = 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–µ–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    antiPatternSystem.randomSeed = (antiPatternSystem.randomSeed * 9301 + 49297) % 233280;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateMiddleWinCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        return Math.random() * 1.0 + 1.5; // 1.5x - 2.5x —Å—Ä–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
    } else {
        return Math.random() * 1.2 + 1.4; // 1.4x - 2.6x –¥–ª—è –º–∞–ª—ã—Ö —Å—Ç–∞–≤–æ–∫
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function generateRandomBotCrashPoint() {
    const random = getSeededRandom() * 100;
    
    if (random < 30) return Math.random() * 3 + 2; // 2x - 5x
    if (random < 60) return Math.random() * 4 + 5; // 5x - 9x
    if (random < 85) return Math.random() * 6 + 9; // 9x - 15x
    return Math.random() * 15 + 15; // 15x - 30x
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≤—ã–∏–≥—Ä—ã—à–Ω—ã–π)
function generateAntiPatternWinningCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π
    if (shouldAvoidPattern('high')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    const bonusChance = antiPatternSystem.lastLowWins * 15; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∏
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
    if (totalBet >= 0.7) { // –ë–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏
        if (random < 25 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à 1.0-1.4x
        if (random < 55 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π 1.8-2.3x  
        if (random < 80 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π 4.0-5.2x
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π 5.2-15x
    } else { // –ú–∞–ª—ã–µ —Å—Ç–∞–≤–∫–∏ (0.1-0.6)
        if (random < 15 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π
        if (random < 40 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π
        if (random < 70 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π  
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateAntiPatternBalancedCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
    const winBonus = antiPatternSystem.lastLowWins * 10;
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –≤—ã–∏–≥—Ä—ã—à–µ–π - —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≤—ã—Å–æ–∫–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    const highWinPenalty = antiPatternSystem.lastHighWins * 15;
    
    if (totalBet >= 0.7) {
        if (random < 45 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 65 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 80 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π
        if (random < 93 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    } else {
        if (random < 35 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 55 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 75 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π  
        if (random < 92 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateAntiPatternLosingCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
    if (shouldAvoidPattern('low')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        if (random < 75) return Math.random() * 0.15 + 1.00; // 75% –ø—Ä–æ–∏–≥—Ä—ã—à
        if (random < 88) return Math.random() * 0.4 + 1.0;   // 13% –º–∞–ª—ã–π
        if (random < 96) return Math.random() * 0.5 + 1.8;   // 8% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 4% –±–æ–ª—å—à–æ–π
    } else {
        if (random < 65) return Math.random() * 0.15 + 1.00; // 65% –ø—Ä–æ–∏–≥—Ä—ã—à
        if (random < 80) return Math.random() * 0.4 + 1.0;   // 15% –º–∞–ª—ã–π
        if (random < 92) return Math.random() * 0.5 + 1.8;   // 12% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 8% –±–æ–ª—å—à–æ–π
    }
}

// –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞
function generateUnpredictableRealBankCrashPoint(totalBet, bankBalance, rtpStats) {
    // –ï—Å–ª–∏ –±–∞–Ω–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
    if (bankBalance < 50) {
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª (${bankBalance}), –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ`);
        // 90% —à–∞–Ω—Å —Å–ª–∏–≤–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ–º –±–∞–Ω–∫–µ
        if (getSeededRandom() < 0.90) {
            return Math.random() * 0.1 + 1.00; // 1.00x - 1.10x (–ø–æ—á—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à)
        }
        // 10% –Ω–µ–±–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç–∏
        return Math.random() * 0.3 + 1.1; // 1.1x - 1.4x
    }
    // –ï—Å–ª–∏ –±–∞–Ω–∫ –º–∞–ª–µ–Ω—å–∫–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å
    else if (bankBalance < 200) {
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –º–∞–ª (${bankBalance}), –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫`);
        // –ò–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (shouldAvoidPattern('low')) {
            return generateMiddleWinCrashPoint(totalBet);
        }
        // 80% —à–∞–Ω—Å —Å–ª–∏–≤–∞ –ø—Ä–∏ –º–∞–ª–æ–º –±–∞–Ω–∫–µ
        if (getSeededRandom() < 0.80) {
            return Math.random() * 0.15 + 1.00; // 1.00x - 1.15x (–ø—Ä–æ–∏–≥—Ä—ã—à)
        }
        // 20% –º–∞–ª—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
        return Math.random() * 0.4 + 1.0; // 1.0x - 1.4x
    }
    
    const currentRTP = rtpStats.currentRTP;
    const targetRTP = rtpStats.targetRTP;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º RTP
    const rtpVariance = (getSeededRandom() - 0.5) * 10; // ¬±5% —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const adjustedTargetRTP = targetRTP + rtpVariance;
    
    // –ï—Å–ª–∏ RTP –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Ü–µ–ª–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
    if (currentRTP < adjustedTargetRTP - 8) {
        return generateAntiPatternWinningCrashPoint(totalBet);
    }
    // –ï—Å–ª–∏ RTP –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ - –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    else if (currentRTP < adjustedTargetRTP + 3) {
        return generateAntiPatternBalancedCrashPoint(totalBet);
    }
    // –ï—Å–ª–∏ RTP –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å - –±–æ–ª—å—à–µ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    else {
        return generateAntiPatternLosingCrashPoint(totalBet);
    }
}

// –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –¥–µ–º–æ –±–∞–Ω–∫–∞
function generateUnpredictableDemoBankCrashPoint(totalBet, rtpStats) {
    const currentRTP = rtpStats.currentRTP;
    const targetRTP = rtpStats.targetRTP;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º RTP
    const rtpVariance = (getSeededRandom() - 0.5) * 8;
    const adjustedTargetRTP = targetRTP + rtpVariance;
    
    if (currentRTP < adjustedTargetRTP - 8) {
        return generateAntiPatternWinningCrashPoint(totalBet);
    } else if (currentRTP < adjustedTargetRTP + 3) {
        return generateAntiPatternBalancedCrashPoint(totalBet);
    } else {
        return generateAntiPatternLosingCrashPoint(totalBet);
    }
}

function generateCrashPoint(players = []) {
    resetDailyRTP();
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –¥–µ–º–æ –±–∞–ª–∞–Ω—Å–µ)
    const adminIds = [
        parseInt(process.env.OWNER_TELEGRAM_ID) || 842428912,
        1135073023
    ];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤: –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    const realPlayers = players.filter(p => !p.isBot && !p.demoMode);
    const realNonAdminPlayers = realPlayers.filter(p => !adminIds.includes(parseInt(p.userId)));
    const demoPlayers = players.filter(p => !p.isBot && p.demoMode);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–µ –∞–¥–º–∏–Ω), –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω–æ–≤
    let effectivePlayers = [...players];
    if (realNonAdminPlayers.length > 0) {
        effectivePlayers = players.filter(p => p.isBot || !adminIds.includes(parseInt(p.userId)));
        console.log(`–ò—Å–∫–ª—é—á–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω–æ–≤: –µ—Å—Ç—å ${realNonAdminPlayers.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
    }
    
    const effectiveRealPlayers = effectivePlayers.filter(p => !p.isBot && !p.demoMode);
    const effectiveDemoPlayers = effectivePlayers.filter(p => !p.isBot && p.demoMode);
    
    const totalRealBet = effectiveRealPlayers.reduce((sum, p) => sum + p.betAmount, 0);
    const totalDemoBet = effectiveDemoPlayers.reduce((sum, p) => sum + p.betAmount, 0);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–æ–≤
    const realBank = getCasinoBank();
    const demoBank = getCasinoDemoBank();
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    let crashPoint = 1.00;
    
    if (totalRealBet > 0) {
        crashPoint = generateUnpredictableRealBankCrashPoint(totalRealBet, realBank.total_balance, rtpSystem.realBank);
    } else if (totalDemoBet > 0) {
        crashPoint = generateUnpredictableDemoBankCrashPoint(totalDemoBet, rtpSystem.demoBank, demoBank.total_balance);
    } else {
        // –¢–æ–ª—å–∫–æ –±–æ—Ç—ã - —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä–∞—à –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        crashPoint = generateRandomBotCrashPoint();
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    updateAntiPatternSystem(crashPoint);
    
    return Math.max(1.00, crashPoint);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function updateAntiPatternSystem(crashPoint) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    lastResults.unshift(crashPoint);
    if (lastResults.length > 10) {
        lastResults.pop(); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (crashPoint >= 4.0) {
        antiPatternSystem.lastHighWins++;
        antiPatternSystem.lastLowWins = 0;
    } else if (crashPoint <= 1.5) {
        antiPatternSystem.lastLowWins++;
        antiPatternSystem.lastHighWins = 0;
    } else {
        antiPatternSystem.lastHighWins = 0;
        antiPatternSystem.lastLowWins = 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–µ–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    antiPatternSystem.randomSeed = (antiPatternSystem.randomSeed * 9301 + 49297) % 233280;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å —É—á–µ—Ç–æ–º —Å–µ–º–µ–Ω–∏
function getSeededRandom() {
    return (antiPatternSystem.randomSeed / 233280 + Math.random()) / 2;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–±–µ–≥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞
function shouldAvoidPattern(type) {
    if (type === 'high' && antiPatternSystem.lastHighWins >= 2) {
        return true; // –ò–∑–±–µ–≥–∞–µ–º —Ç—Ä–µ—Ç–∏–π –ø–æ–¥—Ä—è–¥ –≤—ã—Å–æ–∫–∏–π –≤—ã–∏–≥—Ä—ã—à
    }
    if (type === 'low' && antiPatternSystem.lastLowWins >= 3) {
        return true; // –ò–∑–±–µ–≥–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–æ–¥—Ä—è–¥ –Ω–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
    return false;
}

// –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞
function generateUnpredictableRealBankCrashPoint(totalBet, bankBalance, rtpStats) {
    // –ï—Å–ª–∏ –±–∞–Ω–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
    if (bankBalance < 100) {
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –º–∞–ª (${bankBalance}), –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫`);
        // –ù–æ –∏–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (shouldAvoidPattern('low')) {
            return generateMiddleWinCrashPoint(totalBet);
        }
        // 75% —à–∞–Ω—Å —Å–ª–∏–≤–∞ –ø—Ä–∏ –º–∞–ª–æ–º –±–∞–Ω–∫–µ (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 85%)
        if (getSeededRandom() < 0.75) {
            return Math.random() * 0.15 + 1.00; // 1.00x - 1.15x (–ø—Ä–æ–∏–≥—Ä—ã—à)
        }
    }
    
    const currentRTP = rtpStats.currentRTP;
    const targetRTP = rtpStats.targetRTP;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º RTP
    const rtpVariance = (getSeededRandom() - 0.5) * 10; // ¬±5% —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const adjustedTargetRTP = targetRTP + rtpVariance;
    
    // –ï—Å–ª–∏ RTP –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Ü–µ–ª–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
    if (currentRTP < adjustedTargetRTP - 8) {
        return generateAntiPatternWinningCrashPoint(totalBet);
    }
    // –ï—Å–ª–∏ RTP –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ - –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    else if (currentRTP < adjustedTargetRTP + 3) {
        return generateAntiPatternBalancedCrashPoint(totalBet);
    }
    // –ï—Å–ª–∏ RTP –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å - –±–æ–ª—å—à–µ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    else {
        return generateAntiPatternLosingCrashPoint(totalBet);
    }
}

// –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –¥–µ–º–æ –±–∞–Ω–∫–∞
function generateUnpredictableDemoBankCrashPoint(totalBet, rtpStats, demoBankBalance = 10000) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–º–æ –±–∞–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const demoBank = getCasinoDemoBank();
    const currentDemoBankBalance = demoBank ? demoBank.total_balance : demoBankBalance;
    
    // –ï—Å–ª–∏ –¥–µ–º–æ –±–∞–Ω–∫ –∏—Å—Ç–æ—â–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –∑–∞ —Å—á–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
    if (currentDemoBankBalance < 1000) {
        console.log(`–î–µ–º–æ –±–∞–Ω–∫ –º–∞–ª (${currentDemoBankBalance}), –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ`);
        // 85% —à–∞–Ω—Å —Å–ª–∏–≤–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ–º –¥–µ–º–æ –±–∞–Ω–∫–µ
        if (getSeededRandom() < 0.85) {
            return Math.random() * 0.1 + 1.00; // 1.00x - 1.10x (–ø–æ—á—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à)
        }
        // 15% –Ω–µ–±–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        return Math.random() * 0.3 + 1.1; // 1.1x - 1.4x
    }
    // –ï—Å–ª–∏ –¥–µ–º–æ –±–∞–Ω–∫ –Ω–∏–∑–∫–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å
    else if (currentDemoBankBalance < 3000) {
        console.log(`–î–µ–º–æ –±–∞–Ω–∫ –Ω–∏–∑–∫–∏–π (${currentDemoBankBalance}), –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫`);
        // –ò–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (shouldAvoidPattern('low')) {
            return generateMiddleWinCrashPoint(totalBet);
        }
        // 75% —à–∞–Ω—Å —Å–ª–∏–≤–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –¥–µ–º–æ –±–∞–Ω–∫–µ
        if (getSeededRandom() < 0.75) {
            return Math.random() * 0.15 + 1.00; // 1.00x - 1.15x (–ø—Ä–æ–∏–≥—Ä—ã—à)
        }
        // 25% –º–∞–ª—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
        return Math.random() * 0.4 + 1.0; // 1.0x - 1.4x
    }
    
    const currentRTP = rtpStats.currentRTP;
    const targetRTP = rtpStats.targetRTP;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º RTP
    const rtpVariance = (getSeededRandom() - 0.5) * 8;
    const adjustedTargetRTP = targetRTP + rtpVariance;
    
    if (currentRTP < adjustedTargetRTP - 8) {
        return generateAntiPatternWinningCrashPoint(totalBet);
    } else if (currentRTP < adjustedTargetRTP + 3) {
        return generateAntiPatternBalancedCrashPoint(totalBet);
    } else {
        return generateAntiPatternLosingCrashPoint(totalBet);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function generateRandomBotCrashPoint() {
    const random = getSeededRandom() * 100;
    
    if (random < 30) return Math.random() * 3 + 2; // 2x - 5x
    if (random < 60) return Math.random() * 4 + 5; // 5x - 9x
    if (random < 85) return Math.random() * 6 + 9; // 9x - 15x
    return Math.random() * 15 + 15; // 15x - 30x
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –° –ó–ê–©–ò–¢–û–ô –û–¢ –ü–ê–¢–¢–ï–†–ù–û–í

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateMiddleWinCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        return Math.random() * 1.0 + 1.5; // 1.5x - 2.5x —Å—Ä–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
    } else {
        return Math.random() * 1.2 + 1.4; // 1.4x - 2.6x –¥–ª—è –º–∞–ª—ã—Ö —Å—Ç–∞–≤–æ–∫
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≤—ã–∏–≥—Ä—ã—à–Ω—ã–π)
function generateAntiPatternWinningCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π
    if (shouldAvoidPattern('high')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    const bonusChance = antiPatternSystem.lastLowWins * 15; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∏
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
    if (totalBet >= 0.7) { // –ë–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏
        if (random < 25 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à 1.0-1.4x
        if (random < 55 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π 1.8-2.3x  
        if (random < 80 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π 4.0-5.2x
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π 5.2-15x
    } else { // –ú–∞–ª—ã–µ —Å—Ç–∞–≤–∫–∏ (0.1-0.6)
        if (random < 15 + bonusChance) return Math.random() * 0.4 + 1.0; // –ú–∞–ª—ã–π
        if (random < 40 + bonusChance) return Math.random() * 0.5 + 1.8; // –°—Ä–µ–¥–Ω–∏–π
        if (random < 70 + bonusChance) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π  
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateAntiPatternBalancedCrashPoint(totalBet) {
    const random = getSeededRandom() * 100;
    
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
    const winBonus = antiPatternSystem.lastLowWins * 10;
    // –ï—Å–ª–∏ –±—ã–ª –ø–∞—Ç—Ç–µ—Ä–Ω –≤—ã–∏–≥—Ä—ã—à–µ–π - —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≤—ã—Å–æ–∫–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    const highWinPenalty = antiPatternSystem.lastHighWins * 15;
    
    if (totalBet >= 0.7) {
        if (random < 45 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 65 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 80 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π
        if (random < 93 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    } else {
        if (random < 35 - winBonus) return Math.random() * 0.15 + 1.00; // –ü—Ä–æ–∏–≥—Ä—ã—à
        if (random < 55 - winBonus) return Math.random() * 0.4 + 1.0;   // –ú–∞–ª—ã–π
        if (random < 75 - winBonus) return Math.random() * 0.5 + 1.8;   // –°—Ä–µ–¥–Ω–∏–π  
        if (random < 92 - highWinPenalty) return Math.random() * 1.2 + 4.0; // –ë–æ–ª—å—à–æ–π
        return Math.random() * 9.8 + 5.2; // –ö—Ä—É–ø–Ω—ã–π
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateAntiPatternLosingCrashPoint(totalBet) {
    // –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ - –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
    if (shouldAvoidPattern('low')) {
        return generateMiddleWinCrashPoint(totalBet);
    }
    
    const random = getSeededRandom() * 100;
    
    if (totalBet >= 0.7) {
        if (random < 75) return Math.random() * 0.15 + 1.00; // 75% –ø—Ä–æ–∏–≥—Ä—ã—à (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 80%)
        if (random < 88) return Math.random() * 0.4 + 1.0;   // 13% –º–∞–ª—ã–π
        if (random < 96) return Math.random() * 0.5 + 1.8;   // 8% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 4% –±–æ–ª—å—à–æ–π
    } else {
        if (random < 65) return Math.random() * 0.15 + 1.00; // 65% –ø—Ä–æ–∏–≥—Ä—ã—à (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 70%)
        if (random < 80) return Math.random() * 0.4 + 1.0;   // 15% –º–∞–ª—ã–π
        if (random < 92) return Math.random() * 0.5 + 1.8;   // 12% —Å—Ä–µ–¥–Ω–∏–π
        return Math.random() * 1.2 + 4.0; // 8% –±–æ–ª—å—à–æ–π
    }
}

// Rocket Game Main Functions

function startRocketGame() {
    if (rocketGame.status !== 'waiting') return;

    rocketGame.status = 'counting';
    rocketGame.multiplier = 1.00;
    rocketGame.startTime = Date.now();
    rocketGame.endBetTime = Date.now() + 5000; // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—Ç–∞–≤–∫–∏
    rocketGame.players = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º crashPoint –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç–∞–≤–∫–∏
    setTimeout(() => {
        // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        rocketGame.crashPoint = generateCrashPoint(rocketGame.players);
        console.log(`–ö—Ä–∞—à-–ø–æ–∏–Ω—Ç: ${rocketGame.crashPoint.toFixed(2)}x`);
        
        // –í—ã–≤–æ–¥–∏–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ RTP: ${rtpSystem.realBank.currentRTP.toFixed(2)}%`);
        console.log(`–î–µ–º–æ –±–∞–Ω–∫ RTP: ${rtpSystem.demoBank.currentRTP.toFixed(2)}%`);
    }, 5000);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –±–æ—Ç–æ–≤
    rocketBots.forEach(bot => {
        const betAmount = bot.minBet + Math.random() * (bot.maxBet - bot.minBet);
        const autoCashout = bot.risk === 'low' ? 2 + Math.random() * 3 : 
                           bot.risk === 'medium' ? 5 + Math.random() * 10 : 
                           10 + Math.random() * 30;
        
        rocketGame.players.push({
            name: bot.name,
            betAmount: parseFloat(betAmount.toFixed(2)),
            autoCashout: parseFloat(autoCashout.toFixed(2)),
            isBot: true,
            cashedOut: false,
            winAmount: 0
        });
    });

    // –§–ò–ö–°: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
    rocketGame.timeLeft = 5;
    broadcastRocketUpdate();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const syncInterval = setInterval(() => {
        if (rocketGame.status !== 'counting') {
            clearInterval(syncInterval);
            return;
        }
        
        const timeLeft = Math.max(0, Math.ceil((rocketGame.endBetTime - Date.now()) / 1000));
        rocketGame.timeLeft = timeLeft;
        broadcastRocketUpdate();
        
        if (timeLeft <= 0) {
            clearInterval(syncInterval);
            rocketGame.status = 'flying';
            broadcastRocketUpdate();
            startRocketFlight();
        }
    }, 1000);
}


// server.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è startRocketFlight
function startRocketFlight() {
  const startTime = Date.now();
  let baseSpeed = 0.1; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
  let acceleration = 0.05; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ
  
  const flightInterval = setInterval(() => {
    if (rocketGame.status !== 'flying') {
      clearInterval(flightInterval);
      return;
    }

    const elapsed = (Date.now() - startTime) / 1000;
    
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
    // –ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å
    rocketGame.multiplier = 1.00 + (elapsed * baseSpeed * Math.exp(elapsed * acceleration));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —É –±–æ—Ç–æ–≤
    rocketGame.players.forEach(player => {
      if (player.isBot && !player.cashedOut && rocketGame.multiplier >= player.autoCashout) {
        player.cashedOut = true;
        player.winAmount = player.betAmount * rocketGame.multiplier;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
    if (rocketGame.multiplier >= rocketGame.crashPoint) {
      rocketGame.status = 'crashed';
      clearInterval(flightInterval);
      processRocketGameEnd();
    }

    broadcastRocketUpdate();
  }, 100); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100ms
}


// server.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processRocketGameEnd
function processRocketGameEnd() {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é
  const gameRecord = rocketGames.insert({
    crashPoint: rocketGame.crashPoint,
    maxMultiplier: rocketGame.multiplier,
    startTime: new Date(rocketGame.startTime),
    endTime: new Date(),
    playerCount: rocketGame.players.length,
    totalBets: rocketGame.players.reduce((sum, p) => sum + p.betAmount, 0),
    totalPayouts: rocketGame.players.reduce((sum, p) => sum + (p.cashedOut ? p.winAmount : 0), 0)
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  rocketGame.players.forEach(player => {
    if (!player.isBot && player.cashedOut) {
      const user = users.findOne({ telegram_id: parseInt(player.userId) });
      if (user) {
        const winAmount = player.betAmount * player.cashoutMultiplier;
        
        if (player.demoMode) {
          users.update({
            ...user,
            demo_balance: user.demo_balance + winAmount
          });
        } else {
          users.update({
            ...user,
            main_balance: user.main_balance + winAmount
          });
          updateCasinoBank(-winAmount);
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transactions.insert({
          user_id: user.$loki,
          amount: winAmount,
          type: 'rocket_win',
          status: 'completed',
          demo_mode: player.demoMode,
          game_id: gameRecord.$loki,
          created_at: new Date()
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
        rocketBets.insert({
          game_id: gameRecord.$loki,
          user_id: user.$loki,
          bet_amount: player.betAmount,
          cashout_multiplier: player.cashoutMultiplier,
          win_amount: winAmount,
          demo_mode: player.demoMode,
          created_at: new Date()
        });
      }
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
  rocketGame.history.unshift({
    crashPoint: rocketGame.crashPoint,
    multiplier: rocketGame.multiplier
  });

  if (rocketGame.history.length > 50) {
    rocketGame.history.pop();
  }

  broadcastRocketUpdate();

  // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  setTimeout(() => {
    rocketGame.status = 'waiting';
    rocketGame.multiplier = 1.00;
    rocketGame.players = [];
    broadcastRocketUpdate();
    startRocketGame();
  }, 5000);
}

function broadcastRocketUpdate() {
    const data = JSON.stringify({
        type: 'rocket_update',
        game: rocketGame
    });

    wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(data);
        }
    });
}
// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
wss.on('connection', function connection(ws) {
  console.log('Rocket game client connected');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  ws.send(JSON.stringify({
    type: 'rocket_update',
    game: rocketGame
  }));

  ws.on('close', () => {
    console.log('Rocket game client disconnected');
  });
});

// API: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
app.post('/api/admin/login', async (req, res) => {
    const { telegramId, password } = req.body;
    
    // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const allowedAdmins = [
        parseInt(process.env.OWNER_TELEGRAM_ID), 
        1135073023 // –≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    ];
    
    const isAdmin = allowedAdmins.includes(parseInt(telegramId)) && 
                   password === process.env.ADMIN_PASSWORD;

    if (isAdmin) {
        logAdminAction('admin_login', telegramId);
        res.json({ success: true, isAdmin: true });
    } else {
        res.json({ success: false, isAdmin: false });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
app.get('/api/admin/dashboard/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –æ–±–æ–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const allowedAdmins = [
        parseInt(process.env.OWNER_TELEGRAM_ID), 
        1135073023 // –≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    ];
    
    if (!allowedAdmins.includes(telegramId)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const bank = getCasinoBank();
        const demoBank = getCasinoDemoBank();
        const totalUsers = users.count();
        const totalTransactions = transactions.count();
        const totalMinesGames = minesGames.count();
        const totalRocketGames = rocketGames.count();

        res.json({
            bank_balance: bank.total_balance,
            demo_bank_balance: demoBank.total_balance,
            total_users: totalUsers,
            total_transactions: totalTransactions,
            total_mines_games: totalMinesGames,
            total_rocket_games: totalRocketGames
        });
    } catch (error) {
        console.error('Admin dashboard error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É
app.post('/api/admin/withdraw-profit', async (req, res) => {
    const { telegramId, amount } = req.body;

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const bank = getCasinoBank();
        
        if (bank.total_balance < amount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ –∫–∞–∑–∏–Ω–æ' });
        }

        // –í—ã–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ Crypto Pay
        const transfer = await cryptoPayRequest('transfer', {
            user_id: telegramId,
            asset: 'TON',
            amount: amount.toString(),
            spend_id: `owner_withdraw_${Date.now()}`
        }, false);

        if (transfer.ok && transfer.result) {
            updateCasinoBank(-amount);
            
            logAdminAction('withdraw_profit', telegramId, { amount: amount });
            
            res.json({
                success: true,
                message: 'Profit withdrawn successfully',
                hash: transfer.result.hash,
                new_balance: bank.total_balance - amount
            });
        } else {
            res.status(500).json({ error: 'Withdrawal failed' });
        }
    } catch (error) {
        console.error('Withdraw profit error:', error);
        res.status(500).json({ error: 'Withdrawal error' });
    }
});

app.post('/api/admin/add-demo-balance', async (req, res) => {
    const { telegramId, targetTelegramId, amount } = req.body;

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const user = users.findOne({ telegram_id: parseInt(targetTelegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        users.update({
            ...user,
            demo_balance: user.demo_balance + parseFloat(amount)
        });

        logAdminAction('add_demo_balance', telegramId, {
            target_user: targetTelegramId,
            amount: amount
        });

        res.json({
            success: true,
            message: 'Demo balance added successfully',
            new_balance: user.demo_balance + parseFloat(amount)
        });
    } catch (error) {
        console.error('Add demo balance error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/admin/transactions/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const allTransactions = transactions.chain()
            .simplesort('created_at', true)
            .limit(100)
            .data()
            .map(transaction => ({
                ...transaction,
                user: users.get(transaction.user_id)
            }));

        res.json(allTransactions);
    } catch (error) {
        console.error('Get transactions error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä Mines
app.get('/api/admin/mines-games/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const games = minesGames.chain()
            .simplesort('created_at', true)
            .limit(100)
            .data()
            .map(game => ({
                ...game,
                user: users.get(game.user_id)
            }));

        res.json(games);
    } catch (error) {
        console.error('Get mines games error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä Rocket
app.get('/api/admin/rocket-games/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const games = rocketGames.chain()
            .simplesort('startTime', true)
            .limit(100)
            .data();

        res.json(games);
    } catch (error) {
        console.error('Get rocket games error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ Rocket
app.get('/api/admin/rocket-bets/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const bets = rocketBets.chain()
            .simplesort('created_at', true)
            .limit(100)
            .data()
            .map(bet => ({
                ...bet,
                user: users.get(bet.user_id),
                game: rocketGames.get(bet.game_id)
            }));

        res.json(bets);
    } catch (error) {
        console.error('Get rocket bets error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/admin/users/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);

    if (telegramId !== parseInt(process.env.OWNER_TELEGRAM_ID)) {
        return res.status(403).json({ error: 'Access denied' });
    }

    try {
        const allUsers = users.chain()
            .simplesort('created_at', true)
            .data();

        res.json(allUsers);
    } catch (error) {
        console.error('Get users error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
app.post('/api/create-invoice', async (req, res) => {
    const { telegramId, amount, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const invoice = await cryptoPayRequest('createInvoice', {
            asset: 'TON',
            amount: amount.toString(),
            description: `Deposit for user ${telegramId}`,
            hidden_message: `Deposit ${amount} TON`,
            payload: JSON.stringify({
                telegram_id: telegramId,
                demo_mode: demoMode,
                amount: amount
            }),
            paid_btn_name: 'callback',
            paid_btn_url: 'https://t.me/your_bot',
            allow_comments: false
        }, demoMode);

        if (invoice.ok && invoice.result) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–∂–∏–¥–∞—é—â—É—é
            transactions.insert({
                user_id: user.$loki,
                amount: amount,
                type: 'deposit',
                status: 'pending',
                invoice_id: invoice.result.invoice_id,
                demo_mode: demoMode,
                created_at: new Date()
            });

            res.json({
                success: true,
                invoice_url: invoice.result.pay_url,
                invoice_id: invoice.result.invoice_id
            });
        } else {
            res.status(500).json({ error: 'Failed to create invoice' });
        }
    } catch (error) {
        console.error('Create invoice error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
app.post('/api/check-invoice', async (req, res) => {
    const { invoiceId, demoMode } = req.body;

    try {
        const invoice = await cryptoPayRequest('getInvoices', {
            invoice_ids: invoiceId
        }, demoMode);

        if (invoice.ok && invoice.result.items.length > 0) {
            const invoiceData = invoice.result.items[0];
            
            if (invoiceData.status === 'paid') {
                // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                const transaction = transactions.findOne({ invoice_id: invoiceId });
                
                if (transaction && transaction.status === 'pending') {
                    const user = users.get(transaction.user_id);
                    
                    if (demoMode) {
                        users.update({
                            ...user,
                            demo_balance: user.demo_balance + transaction.amount
                        });
                    } else {
                        users.update({
                            ...user,
                            main_balance: user.main_balance + transaction.amount
                        });
                        updateCasinoBank(transaction.amount);
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    transactions.update({
                        ...transaction,
                        status: 'completed',
                        updated_at: new Date()
                    });

                    res.json({ 
                        success: true, 
                        status: 'paid',
                        amount: transaction.amount
                    });
                } else {
                    res.json({ success: false, status: 'not_found' });
                }
            } else {
                res.json({ success: true, status: invoiceData.status });
            }
        } else {
            res.json({ success: false, status: 'not_found' });
        }
    } catch (error) {
        console.error('Check invoice error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
app.post('/api/create-withdrawal', async (req, res) => {
    const { telegramId, amount, address, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < amount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        if (demoMode) {
            // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            users.update({
                ...user,
                demo_balance: user.demo_balance - amount
            });

            transactions.insert({
                user_id: user.$loki,
                amount: -amount,
                type: 'withdrawal',
                status: 'completed',
                demo_mode: true,
                address: address,
                created_at: new Date()
            });

            res.json({
                success: true,
                message: 'Withdrawal completed (demo mode)',
                new_balance: user.demo_balance - amount
            });
        } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–µ–º –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Pay
            const transfer = await cryptoPayRequest('transfer', {
                user_id: telegramId,
                asset: 'TON',
                amount: amount.toString(),
                spend_id: `withdrawal_${Date.now()}_${telegramId}`
            }, false);

            if (transfer.ok && transfer.result) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–Ω–∫ –∫–∞–∑–∏–Ω–æ
                users.update({
                    ...user,
                    main_balance: user.main_balance - amount
                });
                
                updateCasinoBank(-amount);

                transactions.insert({
                    user_id: user.$loki,
                    amount: -amount,
                    type: 'withdrawal',
                    status: 'completed',
                    demo_mode: false,
                    address: address,
                    hash: transfer.result.hash,
                    created_at: new Date()
                });

                res.json({
                    success: true,
                    message: 'Withdrawal completed',
                    hash: transfer.result.hash,
                    new_balance: user.main_balance - amount
                });
            } else {
                res.status(500).json({ error: 'Withdrawal failed' });
            }
        }
    } catch (error) {
        console.error('Create withdrawal error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/balance/:telegramId', async (req, res) => {
    const telegramId = parseInt(req.params.telegramId);
    // –¢–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º
    const isAdminUser = telegramId === 842428912 || telegramId === 1135073023;

    try {
        const user = users.findOne({ telegram_id: telegramId });
        
        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            const newUser = users.insert({
                telegram_id: telegramId,
                main_balance: 0,
                demo_balance: isAdminUser ? 1000 : 0, // –î–µ–º–æ –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                created_at: new Date(),
                demo_mode: false,
                is_admin: telegramId === parseInt(process.env.OWNER_TELEGRAM_ID) || telegramId === 1135073023
            });
            
            res.json({
                main_balance: newUser.main_balance,
                demo_balance: newUser.demo_balance,
                demo_mode: newUser.demo_mode,
                is_admin: newUser.is_admin
            });
        } else {
            res.json({
                main_balance: user.main_balance,
                demo_balance: user.demo_balance,
                demo_mode: user.demo_mode,
                is_admin: user.is_admin
            });
        }
    } catch (error) {
        console.error('Get balance error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/user/toggle-demo-mode', async (req, res) => {
    const { telegramId } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–∞ ID –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º)
        if (parseInt(telegramId) !== 842428912 && parseInt(telegramId) !== 1135073023) {
            return res.status(403).json({ error: 'Demo mode not available' });
        }

        users.update({
            ...user,
            demo_mode: !user.demo_mode
        });

        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –¥–µ–º–æ —Ä–µ–∂–∏–º: ${!user.demo_mode}`);

        res.json({
            success: true,
            demo_mode: !user.demo_mode
        });
    } catch (error) {
        console.error('Toggle demo mode error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ù–∞—á–∞—Ç—å –∏–≥—Ä—É Mines
app.post('/api/mines/start', async (req, res) => {
    const { telegramId, betAmount, minesCount, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        const game = minesGames.insert({
            user_id: user.$loki,
            bet_amount: betAmount,
            mines_count: minesCount,
            revealed_cells: [],
            game_over: false,
            win: false,
            current_multiplier: 1,
            demo_mode: demoMode,
            created_at: new Date()
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
       if (demoMode) {
    users.update({
        ...user,
        demo_balance: user.demo_balance - betAmount
    });
} else {
    users.update({
        ...user,
        main_balance: user.main_balance - betAmount
    });
    updateCasinoBank(betAmount); // –†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
}
        res.json({
            success: true,
            game_id: game.$loki,
            new_balance: demoMode ? user.demo_balance - betAmount : user.main_balance - betAmount
        });
    } catch (error) {
        console.error('Mines start error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É –≤ Mines
app.post('/api/mines/open', async (req, res) => {
    const { gameId, cellIndex, telegramId } = req.body;

    try {
        const game = minesGames.get(gameId);
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!game || !user) {
            return res.status(404).json({ error: 'Game or user not found' });
        }

        if (game.game_over) {
            return res.status(400).json({ error: 'Game already finished' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
        if (!game.mines) {
            const mines = [];
            while (mines.length < game.mines_count) {
                const randomCell = Math.floor(Math.random() * 25);
                if (!mines.includes(randomCell)) {
                    mines.push(randomCell);
                }
            }
            minesGames.update({
                ...game,
                mines: mines
            });
            game.mines = mines;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –Ω–∞ –º–∏–Ω—É
        if (game.mines.includes(cellIndex)) {
            minesGames.update({
                ...game,
                game_over: true,
                win: false
            });

            res.json({
                success: true,
                game_over: true,
                win: false,
                mine_hit: true,
                multiplier: 0
            });
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É
            const revealedCells = [...game.revealed_cells, cellIndex];
            const multiplier = calculateMultiplier(revealedCells.length, game.mines_count);

            minesGames.update({
                ...game,
                revealed_cells: revealedCells,
                current_multiplier: multiplier
            });

            res.json({
                success: true,
                game_over: false,
                mine_hit: false,
                multiplier: multiplier,
                revealed_cells: revealedCells
            });
        }
    } catch (error) {
        console.error('Mines open error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ Mines
app.post('/api/mines/cashout', async (req, res) => {
    const { gameId, telegramId } = req.body;

    try {
        const game = minesGames.get(gameId);
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!game || !user) {
            return res.status(404).json({ error: 'Game or user not found' });
        }

        if (game.game_over) {
            return res.status(400).json({ error: 'Game already finished' });
        }

        const winAmount = game.bet_amount * game.current_multiplier;

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        minesGames.update({
            ...game,
            game_over: true,
            win: true,
            win_amount: winAmount
        });

        // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if (game.demo_mode) {
    users.update({
        ...user,
        demo_balance: user.demo_balance + winAmount
    });
    updateCasinoDemoBank(-winAmount); // –î–µ–º–æ-–±–∞–Ω–∫
} else {
    users.update({
        ...user,
        main_balance: user.main_balance + winAmount
    });
    updateCasinoBank(-winAmount); // –†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
}

        res.json({
            success: true,
            win_amount: winAmount,
            multiplier: game.current_multiplier,
            new_balance: game.demo_mode ? user.demo_balance + winAmount : user.main_balance + winAmount
        });
    } catch (error) {
        console.error('Mines cashout error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ Rocket
app.post('/api/rocket/bet', async (req, res) => {
    const { telegramId, betAmount, demoMode } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // –ü–†–û–í–ï–†–ö–ê: –£–∂–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingBet = rocketGame.players.find(p => 
           p.userId == telegramId && !p.isBot
        );
        
        if (existingBet) {
            return res.status(400).json({ error: '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ' });
        }

        // –ü–†–û–í–ï–†–ö–ê: –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ
        if (rocketGame.status !== 'counting' || Date.now() > rocketGame.endBetTime) {
            return res.status(400).json({ error: '–í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å' });
        }

        const balance = demoMode ? user.demo_balance : user.main_balance;
        
        if (balance < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        if (rocketGame.status !== 'counting') {
            return res.status(400).json({ error: '–°—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è' });
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance - betAmount
            });
            updateCasinoDemoBank(-betAmount); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ betAmount, —Ç–µ–ø–µ—Ä—å -betAmount
            // –û–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ–º–æ –±–∞–Ω–∫–∞
            updateRTPStats('demoBank', betAmount, 0);
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance - betAmount
            });
            updateCasinoBank(betAmount);
            // –û–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞
            updateRTPStats('realBank', betAmount, 0);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
        const player = {
            userId: telegramId,
            name: `User_${telegramId}`,
            betAmount: parseFloat(betAmount),
            demoMode: demoMode,
            cashedOut: false,
            cashoutMultiplier: null,
            winAmount: 0,
            isBot: false
        };

        rocketGame.players.push(player);

        broadcastRocketUpdate();

        res.json({
            success: true,
            new_balance: demoMode ? user.demo_balance - betAmount : user.main_balance - betAmount
        });
     } catch (error) {
        console.error('Rocket bet error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ Rocket
app.post('/api/rocket/cashout', async (req, res) => {
    const { telegramId } = req.body;

    try {
        const user = users.findOne({ telegram_id: parseInt(telegramId) });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        if (rocketGame.status !== 'flying') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à —Å–µ–π—á–∞—Å' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞
        const player = rocketGame.players.find(p => p.userId == telegramId && !p.isBot);
        
        if (!player || player.cashedOut) {
            return res.status(400).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à' });
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∏ –æ–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const winAmount = player.betAmount * rocketGame.multiplier;
        
        if (player.demoMode) {
            users.update({
                ...user,
                demo_balance: user.demo_balance + winAmount
            });
            updateCasinoDemoBank(-winAmount);
            // –û–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ–º–æ –±–∞–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –≤—ã–ø–ª–∞—Ç–∞)
            updateRTPStats('demoBank', 0, winAmount);
        } else {
            users.update({
                ...user,
                main_balance: user.main_balance + winAmount
            });
            updateCasinoBank(-winAmount);
            // –û–±–Ω–æ–≤–ª—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –≤—ã–ø–ª–∞—Ç–∞)
            updateRTPStats('realBank', 0, winAmount);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        player.cashedOut = true;
        player.cashoutMultiplier = rocketGame.multiplier;
        player.winAmount = winAmount;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ä–∞–∑—É
        transactions.insert({
            user_id: user.$loki,
            amount: winAmount,
            type: 'rocket_win',
            status: 'completed',
            demo_mode: player.demoMode,
            created_at: new Date()
        });

        broadcastRocketUpdate();

        res.json({
            success: true,
            multiplier: rocketGame.multiplier,
            winAmount: winAmount,
            new_balance: player.demoMode ? user.demo_balance : user.main_balance
        });
    } catch (error) {
        console.error('Rocket cashout error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é Rocket
app.get('/api/rocket/history', async (req, res) => {
    try {
        res.json(rocketGame.history.slice(0, 20));
    } catch (error) {
        console.error('Get rocket history error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É Rocket
app.get('/api/rocket/current', async (req, res) => {
    try {
        res.json(rocketGame);
    } catch (error) {
        console.error('Get current rocket game error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// –ö—Ä–æ–Ω –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', async () => {
    try {
        const pendingTransactions = transactions.find({
            status: 'pending',
            type: 'deposit'
        });

        for (const transaction of pendingTransactions) {
            const invoice = await cryptoPayRequest('getInvoices', {
                invoice_ids: transaction.invoice_id
            }, transaction.demo_mode);

            if (invoice.ok && invoice.result.items.length > 0) {
                const invoiceData = invoice.result.items[0];
                
                if (invoiceData.status === 'paid') {
                    const user = users.get(transaction.user_id);
                    
                  if (transaction.demo_mode) {
    users.update({
        ...user,
        demo_balance: user.demo_balance + transaction.amount
    });
    updateCasinoDemoBank(transaction.amount); // –î–µ–º–æ-–±–∞–Ω–∫
} else {
    users.update({
        ...user,
        main_balance: user.main_balance + transaction.amount
    });
    updateCasinoBank(transaction.amount); // –†–µ–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
}

                    transactions.update({
                        ...transaction,
                        status: 'completed',
                        updated_at: new Date()
                    });
                }
            }
        }
    } catch (error) {
        console.error('Cron job error:', error);
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await initDatabase();
    resetDailyRTP(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RTP —Å–∏—Å—Ç–µ–º—É
    startRocketGame(); // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Ä–∞–∫–µ—Ç–∫–∞
    console.log(`TON Casino Server started on port ${PORT}`);
    console.log(`RTP —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –¶–µ–ª–µ–≤–æ–π RTP: 60%`);
}

// –ö—Ä–æ–Ω –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ RTP –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
cron.schedule('0 0 * * *', () => {
    console.log('–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ RTP...');
    resetDailyRTP();
    console.log('RTP —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å');
});

startServer();